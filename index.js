require('dotenv').config();
const express = require('express');
const cors = require('cors');
const storiesServerRouter = require('./Controller/StoriesServer.js');
const notificationRouter = require('./Controller/Notification.js');
const { scheduleCleanup } = require('./Controller/CleanupData.js');
const sessionManager = require('./Controller/SessionManager.js');

const app = express();
app.use(cors());
app.use(express.json());

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ routers
app.use('/api', storiesServerRouter);
app.use('/api', notificationRouter);

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ session
app.get('/api/session/status', (req, res) => {
  try {
    const status = sessionManager.getSessionStatus();
    res.json({
      success: true,
      data: status,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä session
app.post('/api/session/refresh', async (req, res) => {
  try {
    await sessionManager.refreshSession();
    const status = sessionManager.getSessionStatus();
    res.json({
      success: true,
      message: '‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: status,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö credentials
app.get('/api/session/credentials', (req, res) => {
  try {
    const credentialsChanged = sessionManager.isCredentialsChanged();
    const status = sessionManager.getSessionStatus();
    res.json({
      success: true,
      data: {
        credentialsChanged: credentialsChanged,
        sessionStatus: status,
        currentUsername: process.env.IG_USERNAME,
        hasPassword: !!process.env.IG_PASSWORD
      },
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});



const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  console.log('üöÄ ========================================');
  console.log('üöÄ Instagram API Server Started');
  console.log('üöÄ ========================================');
  console.log(`üåê Server running on http://localhost:${PORT}`);
  console.log(`‚è∞ Started at: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`);
  console.log('üîî Notification System: Active');
  console.log('üìß Email Service: Active');
  console.log('üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° session
  console.log('üîê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session ‡πÄ‡∏Å‡πà‡∏≤...');
  try {
    const sessionStatus = sessionManager.getSessionStatus();
    console.log('üìä Session Status:');
    console.log(`   - Login Status: ${sessionStatus.isLoggedIn ? '‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' : '‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'}`);
    console.log(`   - Session Valid: ${sessionStatus.isSessionValid ? '‚úÖ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' : '‚ùå ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏'}`);
    console.log(`   - Session File: ${sessionStatus.hasSessionFile ? '‚úÖ ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå' : '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå'}`);
    console.log(`   - Session Timeout: ${sessionStatus.sessionTimeout} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`);
    console.log(`   - Login Attempts: ${sessionStatus.loginAttempts}/${sessionStatus.maxLoginAttemptsPerHour}`);
    console.log(`   - Can Attempt Login: ${sessionStatus.canAttemptLogin ? '‚úÖ ‡πÑ‡∏î‡πâ' : '‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ'}`);
    console.log(`   - Session File Size: ${sessionStatus.sessionFileSize} bytes`);
    console.log(`   - Should Rotate Session: ${sessionStatus.shouldRotateSession ? 'üîÑ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô' : '‚úÖ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô'}`);
    console.log(`   - Session Rotation Interval: ${sessionStatus.sessionRotationInterval} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`);
    console.log(`   - Device Rotation: ${sessionStatus.deviceRotationEnabled ? '‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‚ùå ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}`);
    console.log(`   - Current Device Index: ${sessionStatus.currentDeviceIndex}`);
    console.log(`   - Session Only Mode: ${sessionStatus.sessionOnlyMode ? '‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‚ùå ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}`);
    console.log(`   - Aggressive Session Rotation: ${sessionStatus.aggressiveSessionRotation ? '‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‚ùå ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}`);
    console.log(`   - Session Safe: ${sessionStatus.isSessionSafe ? '‚úÖ ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢' : '‚ùå ‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢'}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö credentials
    const credentialsChanged = sessionManager.isCredentialsChanged();
    console.log(`   - Credentials Changed: ${credentialsChanged ? 'üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß' : '‚úÖ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô'}`);
    console.log(`   - Saved Username: ${sessionStatus.savedUsername || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    console.log(`   - Current Username: ${sessionStatus.currentUsername || '‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'}`);
    console.log(`   - Has Credentials: ${sessionStatus.hasCredentials ? '‚úÖ ‡∏°‡∏µ' : '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
    
    if (credentialsChanged) {
      console.log('üîÑ ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á credentials - ‡∏ï‡πâ‡∏≠‡∏á login ‡πÉ‡∏´‡∏°‡πà');
      await sessionManager.login();
    } else if (sessionStatus.hasSessionFile && sessionStatus.isSessionValid) {
      console.log('‚úÖ ‡∏û‡∏ö session ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á login ‡πÉ‡∏´‡∏°‡πà');
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session ‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const isValid = await sessionManager.validateAndRepairSession();
      if (isValid) {
        console.log('‚úÖ Session ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
      } else {
        console.log('üîÑ Session ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ - ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° login ‡πÉ‡∏´‡∏°‡πà');
        await sessionManager.login();
      }
    } else {
      console.log('üîÑ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° login ‡πÉ‡∏´‡∏°‡πà...');
      await sessionManager.login();
    }
  } catch (error) {
    console.log('‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° session:', error.message);
  }
  
  console.log('üöÄ ========================================');
  
  scheduleCleanup();
});