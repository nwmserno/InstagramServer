const fs = require('fs');
const path = require('path');

// ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏õ‡∏£‡∏±‡∏ö path ‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data)
const STORIES_HISTORY_FILE = path.join(__dirname, '../data/StoriesHistory.json');
const PROFILE_PICS_FILE = path.join(__dirname, '../data/ProfilePics.json');
const CLEANUP_LOG_FILE = path.join(__dirname, '../data/CleanupLog.json');
const OVERDUE_EMAIL_FILE = path.join(__dirname, '../data/OverdueEmail.json');
const SESSION_LOG_FILE = path.join(__dirname, '../data/SessionLogin.json');

// ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
const ONE_DAY = 1 * 24 * 60 * 60; // 1 ‡∏ß‡∏±‡∏ô
const TWO_DAYS = 2 * 24 * 60 * 60; // 2 ‡∏ß‡∏±‡∏ô
const TEN_MINUTES = 10 * 60; // 10 ‡∏ô‡∏≤‡∏ó‡∏µ
const FOUR_MONTHS = 4 * 30 * 24 * 60 * 60; // 4 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
function loadJsonFile(filePath) {
  try {
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf8');
      return JSON.parse(data);
    }
  } catch (error) {
    console.error(`Error loading file ${filePath}:`, error);
  }
  return {};
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
function saveJsonFile(filePath, data) {
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
  } catch (error) {
    console.error(`Error saving file ${filePath}:`, error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
function saveCleanupLog(action, details) {
  try {
    let logData = loadJsonFile(CLEANUP_LOG_FILE);
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    if (!logData || !logData.logs) {
      logData = { logs: [] };
    }
    
    const logEntry = {
      timestamp: Math.floor(Date.now() / 1000),
      datetime: new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' }),
      action: action,
      details: details
    };
    
    logData.logs.push(logEntry);
    
    // ‡πÄ‡∏Å‡πá‡∏ö log ‡πÅ‡∏Ñ‡πà 30 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if (logData.logs.length > 30) {
      logData.logs = logData.logs.slice(-30);
    }
    
    saveJsonFile(CLEANUP_LOG_FILE, logData);
  } catch (error) {
    console.error('Error saving cleanup log:', error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å stories_history.json (2 ‡∏ß‡∏±‡∏ô)
function cleanupStoriesHistory() {
  console.log('üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô StoriesHistory.json...');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!fs.existsSync(STORIES_HISTORY_FILE)) {
    console.log('   ‡πÑ‡∏ü‡∏•‡πå StoriesHistory.json ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
    saveCleanupLog('check_stories_history', { 
      action: 'file_not_found',
      message: '‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà'
    });
    return;
  }
  
  const data = loadJsonFile(STORIES_HISTORY_FILE);
  const currentTime = Math.floor(Date.now() / 1000);
  const cutoffTime = currentTime - TWO_DAYS;
  
  let deletedCount = 0;
  const deletedDetails = [];
  const remainingDetails = [];
  const cleanedData = {};
  
  for (const [username, stories] of Object.entries(data)) {
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏ß‡∏±‡∏ô
    const recentStories = stories.filter(story => story.checked_at >= cutoffTime);
    const oldStories = stories.filter(story => story.checked_at < cutoffTime);
    
    if (oldStories.length > 0) {
      deletedCount += oldStories.length;
      const oldestAge = Math.floor((currentTime - Math.min(...oldStories.map(s => s.checked_at))) / 86400);
      console.log(`   ‡∏•‡∏ö‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á @${username}: ${oldStories.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î ${oldestAge} ‡∏ß‡∏±‡∏ô)`);
      
      deletedDetails.push({
        username: username,
        deleted_count: oldStories.length,
        oldest_age_days: oldestAge
      });
    }
    
    if (recentStories.length > 0) {
      cleanedData[username] = recentStories;
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î
      const oldestStory = recentStories.reduce((oldest, current) => 
        current.checked_at < oldest.checked_at ? current : oldest
      );
      const timeUntilDeletion = TWO_DAYS - (currentTime - oldestStory.checked_at);
      const hoursLeft = Math.floor(timeUntilDeletion / 3600);
      const minutesLeft = Math.floor((timeUntilDeletion % 3600) / 60);
      
      remainingDetails.push({
        username: username,
        time_left_hours: hoursLeft,
        time_left_minutes: minutesLeft,
        stories_count: recentStories.length
      });
      
      console.log(`   @${username}: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ ${hoursLeft} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutesLeft} ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏•‡∏ö (${recentStories.length} ‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà)`);
    } else {
      console.log(`   ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á @${username} (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà)`);
    }
  }
  
  saveJsonFile(STORIES_HISTORY_FILE, cleanedData);
  console.log(`‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å StoriesHistory.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (${deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`);
  saveCleanupLog('cleanup_stories_history', { 
    deleted_count: deletedCount, 
    total_entries: Object.keys(data).length,
    deleted_details: deletedDetails,
    remaining_details: remainingDetails
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å profile_pics.json (4 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
function cleanupProfilePics() {
  console.log('üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô ProfilePics.json...');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!fs.existsSync(PROFILE_PICS_FILE)) {
    console.log('   ‡πÑ‡∏ü‡∏•‡πå ProfilePics.json ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
    saveCleanupLog('check_profile_pics', { 
      action: 'file_not_found',
      message: '‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà'
    });
    return;
  }
  
  const data = loadJsonFile(PROFILE_PICS_FILE);
  const currentTime = Math.floor(Date.now() / 1000);
  const cutoffTime = currentTime - FOUR_MONTHS;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
  try {
    const stats = fs.statSync(PROFILE_PICS_FILE);
    const fileAge = currentTime - Math.floor(stats.mtime.getTime() / 1000);
    const fileAgeDays = Math.floor(fileAge / 86400);
    
    if (fileAge > FOUR_MONTHS) {
      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      const emptyData = {};
      saveJsonFile(PROFILE_PICS_FILE, emptyData);
      console.log(`   ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô ProfilePics.json (‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏ü‡∏•‡πå ${fileAgeDays} ‡∏ß‡∏±‡∏ô)`);
      console.log(`‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å ProfilePics.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
      saveCleanupLog('cleanup_profile_pics', { 
        action: 'cleared_all_data',
        file_age_days: fileAgeDays,
        deleted_users: Object.keys(data || {})
      });
    } else {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
      const timeUntilDeletion = FOUR_MONTHS - fileAge;
      const daysLeft = Math.floor(timeUntilDeletion / 86400);
      const hoursLeft = Math.floor((timeUntilDeletion % 86400) / 3600);
      
      console.log(`   ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô ProfilePics.json ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏ü‡∏•‡πå ${fileAgeDays} ‡∏ß‡∏±‡∏ô)`);
      console.log(`   ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ ${daysLeft} ‡∏ß‡∏±‡∏ô ${hoursLeft} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏•‡∏ö`);
      
      saveCleanupLog('check_profile_pics', { 
        action: 'no_cleanup_needed', 
        file_age_days: fileAgeDays,
        total_users: Object.keys(data || {}).length,
        time_left_days: daysLeft,
        time_left_hours: hoursLeft
      });
    }
  } catch (error) {
    console.error('Error checking profile_pics.json age:', error);
    saveCleanupLog('error_profile_pics', { 
      action: 'error',
      error: error.message
    });
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å OverdueEmail.json (1 ‡∏ß‡∏±‡∏ô)
function cleanupOverdueEmail() {
  console.log('üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô OverdueEmail.json...');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!fs.existsSync(OVERDUE_EMAIL_FILE)) {
    console.log('   ‡πÑ‡∏ü‡∏•‡πå OverdueEmail.json ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
    saveCleanupLog('check_overdue_email', { 
      action: 'file_not_found',
      message: '‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà'
    });
    return;
  }
  
  const data = loadJsonFile(OVERDUE_EMAIL_FILE);
  const currentTime = Math.floor(Date.now() / 1000);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
  try {
    const stats = fs.statSync(OVERDUE_EMAIL_FILE);
    const fileAge = currentTime - Math.floor(stats.mtime.getTime() / 1000);
    const fileAgeHours = Math.floor(fileAge / 3600);
    const fileAgeMinutes = Math.floor((fileAge % 3600) / 60);
    
    if (fileAge > ONE_DAY) {
      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      const defaultData = {
        lastCheckTime: null,
        checkInterval: 86400000
      };
      saveJsonFile(OVERDUE_EMAIL_FILE, defaultData);
      console.log(`   ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô OverdueEmail.json (‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏ü‡∏•‡πå ${fileAgeHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${fileAgeMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ)`);
      console.log(`‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å OverdueEmail.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
      saveCleanupLog('cleanup_overdue_email', { 
        action: 'cleared_all_data',
        file_age_hours: fileAgeHours,
        file_age_minutes: fileAgeMinutes,
        previous_last_check_time: data.lastCheckTime,
        previous_check_interval: data.checkInterval
      });
    } else {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
      const timeUntilDeletion = ONE_DAY - fileAge;
      const hoursLeft = Math.floor(timeUntilDeletion / 3600);
      const minutesLeft = Math.floor((timeUntilDeletion % 3600) / 60);
      
      console.log(`   ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô OverdueEmail.json ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏ü‡∏•‡πå ${fileAgeHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${fileAgeMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ)`);
      console.log(`   ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ ${hoursLeft} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutesLeft} ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏•‡∏ö`);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      if (data.lastCheckTime) {
        const lastCheck = new Date(data.lastCheckTime);
        const lastCheckAge = currentTime - Math.floor(lastCheck.getTime() / 1000);
        const lastCheckHours = Math.floor(lastCheckAge / 3600);
        const lastCheckMinutes = Math.floor((lastCheckAge % 3600) / 60);
        
        console.log(`   ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${lastCheck.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })} (${lastCheckHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${lastCheckMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß)`);
      } else {
        console.log(`   ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á`);
      }
      
      saveCleanupLog('check_overdue_email', { 
        action: 'no_cleanup_needed', 
        file_age_hours: fileAgeHours,
        file_age_minutes: fileAgeMinutes,
        last_check_time: data.lastCheckTime,
        check_interval: data.checkInterval,
        time_left_hours: hoursLeft,
        time_left_minutes: minutesLeft
      });
    }
  } catch (error) {
    console.error('Error checking OverdueEmail.json age:', error);
    saveCleanupLog('error_overdue_email', { 
      action: 'error',
      error: error.message
    });
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å CleanupLog.json (10 ‡∏ô‡∏≤‡∏ó‡∏µ)
function cleanupCleanupLog() {
  console.log('üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô CleanupLog.json...');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!fs.existsSync(CLEANUP_LOG_FILE)) {
    console.log('   ‡πÑ‡∏ü‡∏•‡πå CleanupLog.json ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
    saveCleanupLog('check_cleanup_log', { 
      action: 'file_not_found',
      message: '‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà'
    });
    return;
  }
  
  const data = loadJsonFile(CLEANUP_LOG_FILE);
  const currentTime = Math.floor(Date.now() / 1000);
  const cutoffTime = currentTime - TEN_MINUTES;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö log entries ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
  if (data.logs && data.logs.length > 0) {
    // ‡∏Å‡∏£‡∏≠‡∏á log entries ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏ô‡∏≤‡∏ó‡∏µ
    const recentLogs = data.logs.filter(log => log.timestamp >= cutoffTime);
    const oldLogs = data.logs.filter(log => log.timestamp < cutoffTime);
    
    if (oldLogs.length > 0) {
      // ‡∏•‡∏ö log entries ‡πÄ‡∏Å‡πà‡∏≤
      data.logs = recentLogs;
      saveJsonFile(CLEANUP_LOG_FILE, data);
      
      console.log(`   ‡∏•‡∏ö log entries ‡πÄ‡∏Å‡πà‡∏≤: ${oldLogs.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      console.log(`   ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ log entries: ${recentLogs.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      console.log(`‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å CleanupLog.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
      
      saveCleanupLog('cleanup_cleanup_log', { 
        action: 'cleared_old_logs',
        deleted_logs: oldLogs.length,
        remaining_logs: recentLogs.length
      });
    } else {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
      const oldestLog = data.logs.reduce((oldest, current) => 
        current.timestamp < oldest.timestamp ? current : oldest
      );
      const logAge = currentTime - oldestLog.timestamp;
      const logAgeMinutes = Math.floor(logAge / 60);
      const timeUntilDeletion = TEN_MINUTES - logAge;
      const minutesLeft = Math.floor(timeUntilDeletion / 60);
      const secondsLeft = timeUntilDeletion % 60;
      
      console.log(`   ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô CleanupLog.json ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏≠‡∏≤‡∏¢‡∏∏ log ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ${logAgeMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ)`);
      console.log(`   ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ ${minutesLeft} ‡∏ô‡∏≤‡∏ó‡∏µ ${secondsLeft} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏•‡∏ö`);
      
      saveCleanupLog('check_cleanup_log', { 
        action: 'no_cleanup_needed', 
        log_age_minutes: logAgeMinutes,
        total_logs: data.logs.length,
        time_left_minutes: minutesLeft,
        time_left_seconds: secondsLeft
      });
    }
  } else {
    console.log(`   ‡πÑ‡∏°‡πà‡∏°‡∏µ log entries ‡πÉ‡∏ô CleanupLog.json`);
    saveCleanupLog('check_cleanup_log', { 
      action: 'no_logs_found',
      message: '‡πÑ‡∏°‡πà‡∏°‡∏µ log entries'
    });
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å SessionLogin.json (10 ‡∏ô‡∏≤‡∏ó‡∏µ)
function cleanupSessionLog() {
  console.log('üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô SessionLogin.json...');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!fs.existsSync(SESSION_LOG_FILE)) {
    console.log('   ‡πÑ‡∏ü‡∏•‡πå SessionLogin.json ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
    saveCleanupLog('check_session_log', { 
      action: 'file_not_found',
      message: '‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà'
    });
    return;
  }
  
  try {
    const data = loadJsonFile(SESSION_LOG_FILE);
    const currentTime = Math.floor(Date.now() / 1000);
    const cutoffTime = currentTime - TEN_MINUTES;
    
    if (!Array.isArray(data)) {
      console.log('   ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• log ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö');
      saveCleanupLog('check_session_log', { 
        action: 'no_data',
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• log'
      });
      return;
    }
    
    const originalCount = data.length;
    const recentLogs = data.filter(log => {
      let logTime;
      if (typeof log.timestamp === 'string') {
        logTime = Math.floor(new Date(log.timestamp).getTime() / 1000);
      } else if (typeof log.timestamp === 'number') {
        logTime = log.timestamp;
      } else {
        return false; // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤
      }
      return logTime >= cutoffTime;
    });
    const deletedCount = originalCount - recentLogs.length;
    
    if (deletedCount > 0) {
      console.log(`   ‡∏•‡∏ö session log ‡πÄ‡∏Å‡πà‡∏≤: ${deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      console.log(`   ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ session log: ${recentLogs.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏ log ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î
      const oldestLog = data.reduce((oldest, current) => {
        let oldestTime, currentTime;
        
        if (typeof oldest.timestamp === 'string') {
          oldestTime = Math.floor(new Date(oldest.timestamp).getTime() / 1000);
        } else if (typeof oldest.timestamp === 'number') {
          oldestTime = oldest.timestamp;
        } else {
          oldestTime = 0;
        }
        
        if (typeof current.timestamp === 'string') {
          currentTime = Math.floor(new Date(current.timestamp).getTime() / 1000);
        } else if (typeof current.timestamp === 'number') {
          currentTime = current.timestamp;
        } else {
          currentTime = 0;
        }
        
        return currentTime < oldestTime ? current : oldest;
      });
      
      let oldestAge = 0;
      if (oldestLog && oldestLog.timestamp) {
        let oldestLogTime;
        if (typeof oldestLog.timestamp === 'string') {
          oldestLogTime = Math.floor(new Date(oldestLog.timestamp).getTime() / 1000);
        } else if (typeof oldestLog.timestamp === 'number') {
          oldestLogTime = oldestLog.timestamp;
        } else {
          oldestLogTime = 0;
        }
        oldestAge = Math.floor((currentTime - oldestLogTime) / 60);
      }
      console.log(`   ‡∏≠‡∏≤‡∏¢‡∏∏ session log ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î: ${oldestAge} ‡∏ô‡∏≤‡∏ó‡∏µ`);
      
      saveJsonFile(SESSION_LOG_FILE, recentLogs);
      
      saveCleanupLog('cleanup_session_log', {
        deleted_count: deletedCount,
        remaining_count: recentLogs.length,
        oldest_age_minutes: oldestAge
      });
    } else {
      console.log('   ‡πÑ‡∏°‡πà‡∏°‡∏µ session log ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö');
      saveCleanupLog('check_session_log', { 
        action: 'no_old_data',
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ session log ‡πÄ‡∏Å‡πà‡∏≤'
      });
    }
  } catch (error) {
    console.error('   Error ‡∏•‡∏ö session log:', error);
    saveCleanupLog('error_session_log', { 
      action: 'error',
      message: error.message
    });
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
function cleanupOldData() {
  const currentTime = new Date();
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...');
  console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${currentTime.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`);
  console.log('');
  
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  saveCleanupLog('start_cleanup', {
    current_time: currentTime.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })
  });
  
  cleanupStoriesHistory();
  console.log('');
  
  cleanupProfilePics();
  console.log('');
  
  cleanupOverdueEmail();
  console.log('');
  
  cleanupCleanupLog();
  console.log('');
  
  cleanupSessionLog();
  console.log('');
  
  const endTime = new Date();
  console.log('üéâ ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
  console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: ${endTime.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`);
  
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
  saveCleanupLog('finish_cleanup', {
    end_time: endTime.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' }),
    duration_seconds: Math.floor((endTime.getTime() - currentTime.getTime()) / 1000)
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 22:00 ‡∏ô. ‡∏ï‡∏≤‡∏° timezone)
function scheduleCleanup() {
  const now = new Date();
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (22:00 ‡∏ô. ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
  const nextCleanup = new Date();
  nextCleanup.setHours(22, 0, 0, 0); // ‡πÄ‡∏ß‡∏•‡∏≤ 22:00 ‡∏ô. (4 ‡∏ó‡∏∏‡πà‡∏°)
  
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏•‡∏¢ 22:00 ‡∏ô. ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  if (now.getHours() >= 22) {
    nextCleanup.setDate(nextCleanup.getDate() + 1);
  }
  
  const timeUntilCleanup = nextCleanup.getTime() - now.getTime();
  
  console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${now.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`);
  console.log(`‚è∞ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤: ${nextCleanup.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`);
  console.log(`‚è∞ ‡∏£‡∏≠‡∏≠‡∏µ‡∏Å ${Math.floor(timeUntilCleanup / 1000 / 60)} ‡∏ô‡∏≤‡∏ó‡∏µ`);
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
  console.log('');
  console.log('üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
  console.log('   üìÑ StoriesHistory.json: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏ß‡∏±‡∏ô');
  console.log('   üìÑ ProfilePics.json: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 4 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô');
  console.log('   üìÑ OverdueEmail.json: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ß‡∏±‡∏ô');
  console.log('   üìÑ CleanupLog.json: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏ô‡∏≤‡∏ó‡∏µ');
  console.log('   üìÑ SessionLogin.json: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏ô‡∏≤‡∏ó‡∏µ');
  console.log('   ‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 22:00 ‡∏ô. (4 ‡∏ó‡∏∏‡πà‡∏°)');
  console.log('');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  checkCurrentDataStatus();
  
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤
  saveCleanupLog('schedule_cleanup', {
    current_time: now.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' }),
    next_cleanup: nextCleanup.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' }),
    wait_minutes: Math.floor(timeUntilCleanup / 1000 / 60)
  });
  
  // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  setTimeout(() => {
    console.log('üïê ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß!');
    cleanupOldData();
    
    // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 02:00 ‡∏ô.
    setInterval(() => {
      console.log('üïê ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß!');
      cleanupOldData();
    }, 24 * 60 * 60 * 1000); // 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  }, timeUntilCleanup);

  // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏ö SessionLogin.json ‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ
  console.log('‚è∞ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏ö SessionLogin.json ‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ...');
  setInterval(() => {
    const now = new Date();
    console.log(`üïê [${now.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}] ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏ö SessionLogin.json ‡πÅ‡∏•‡πâ‡∏ß!`);
    cleanupSessionLog();
  }, 10 * 60 * 1000); // 10 ‡∏ô‡∏≤‡∏ó‡∏µ
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏π log ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
function getCleanupLogs() {
  try {
    if (!fs.existsSync(CLEANUP_LOG_FILE)) {
      return [];
    }
    const logData = loadJsonFile(CLEANUP_LOG_FILE);
    return logData.logs || [];
  } catch (error) {
    console.error('Error loading cleanup logs:', error);
    return [];
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
function checkCurrentDataStatus() {
  const currentTime = Math.floor(Date.now() / 1000);
  
  console.log('üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö stories_history.json
  if (fs.existsSync(STORIES_HISTORY_FILE)) {
    try {
      const historyData = loadJsonFile(STORIES_HISTORY_FILE);
      const historyUsers = Object.keys(historyData);
      
      if (historyUsers.length > 0) {
        console.log(`   üìÑ StoriesHistory.json: ${historyUsers.length} ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ`);
        
        historyUsers.forEach(username => {
          const userStories = historyData[username];
          if (userStories.length > 0) {
            const oldestStory = userStories.reduce((oldest, current) => 
              current.checked_at < oldest.checked_at ? current : oldest
            );
            const ageHours = Math.floor((currentTime - oldestStory.checked_at) / 3600);
            const ageMinutes = Math.floor(((currentTime - oldestStory.checked_at) % 3600) / 60);
            const timeLeft = TWO_DAYS - (currentTime - oldestStory.checked_at);
            const hoursLeft = Math.floor(timeLeft / 3600);
            const minutesLeft = Math.floor((timeLeft % 3600) / 60);
            
            if (timeLeft > 0) {
              console.log(`      @${username}: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ ${hoursLeft} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutesLeft} ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏≠‡∏≤‡∏¢‡∏∏ ${ageHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${ageMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ)`);
            } else {
              console.log(`      @${username}: ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏≠‡∏≤‡∏¢‡∏∏ ${ageHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${ageMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ) - ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö`);
            }
          }
        });
      } else {
        console.log('   üìÑ StoriesHistory.json: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } catch (error) {
      console.log('   üìÑ StoriesHistory.json: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ');
    }
  } else {
    console.log('   üìÑ StoriesHistory.json: ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö profile_pics.json
  if (fs.existsSync(PROFILE_PICS_FILE)) {
    try {
      const profilePicsData = loadJsonFile(PROFILE_PICS_FILE);
      const profilePicsUsers = Object.keys(profilePicsData);
      
      if (profilePicsUsers.length > 0) {
        console.log(`   üìÑ ProfilePics.json: ${profilePicsUsers.length} ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ`);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏ü‡∏•‡πå
        const stats = fs.statSync(PROFILE_PICS_FILE);
        const fileAge = currentTime - Math.floor(stats.mtime.getTime() / 1000);
        const fileAgeDays = Math.floor(fileAge / 86400);
        const fileAgeHours = Math.floor((fileAge % 86400) / 3600);
        const fileAgeMinutes = Math.floor((fileAge % 3600) / 60);
        const timeLeft = FOUR_MONTHS - fileAge;
        const daysLeft = Math.floor(timeLeft / 86400);
        const hoursLeft = Math.floor((timeLeft % 86400) / 3600);
        const minutesLeft = Math.floor((timeLeft % 3600) / 60);
        
        if (timeLeft > 0) {
          console.log(`      ‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏ü‡∏•‡πå: ${fileAgeDays} ‡∏ß‡∏±‡∏ô ${fileAgeHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${fileAgeMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ, ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ ${daysLeft} ‡∏ß‡∏±‡∏ô ${hoursLeft} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutesLeft} ‡∏ô‡∏≤‡∏ó‡∏µ`);
        } else {
          console.log(`      ‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏ü‡∏•‡πå: ${fileAgeDays} ‡∏ß‡∏±‡∏ô ${fileAgeHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${fileAgeMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ - ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)`);
        }
      } else {
        console.log('   üìÑ ProfilePics.json: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } catch (error) {
      console.log('   üìÑ ProfilePics.json: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ');
    }
  } else {
    console.log('   üìÑ ProfilePics.json: ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CleanupLog.json
  if (fs.existsSync(CLEANUP_LOG_FILE)) {
    try {
      const logData = loadJsonFile(CLEANUP_LOG_FILE);
      const logCount = logData.logs ? logData.logs.length : 0;
      
      if (logCount > 0) {
        console.log(`   üìÑ CleanupLog.json: ${logCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ log`);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å log entry ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        const latestLog = logData.logs[logData.logs.length - 1];
        if (latestLog && latestLog.timestamp) {
          const logAge = currentTime - latestLog.timestamp;
          const logAgeMinutes = Math.floor(logAge / 60);
          const logAgeSeconds = logAge % 60;
          const timeLeft = TEN_MINUTES - logAge;
          const minutesLeft = Math.floor(timeLeft / 60);
          const secondsLeft = timeLeft % 60;
        
        if (timeLeft > 0) {
            console.log(`      ‡∏≠‡∏≤‡∏¢‡∏∏ log ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${logAgeMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ ${logAgeSeconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ, ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ ${minutesLeft} ‡∏ô‡∏≤‡∏ó‡∏µ ${secondsLeft} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
          } else {
            console.log(`      ‡∏≠‡∏≤‡∏¢‡∏∏ log ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${logAgeMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ ${logAgeSeconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ - ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)`);
          }
        } else {
          console.log(`      ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å log entries ‡πÑ‡∏î‡πâ`);
        }
      } else {
        console.log('   üìÑ CleanupLog.json: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } catch (error) {
      console.log('   üìÑ CleanupLog.json: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ');
    }
  } else {
    console.log('   üìÑ CleanupLog.json: ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OverdueEmail.json
  if (fs.existsSync(OVERDUE_EMAIL_FILE)) {
    try {
      const overdueEmailData = loadJsonFile(OVERDUE_EMAIL_FILE);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏ü‡∏•‡πå
      const stats = fs.statSync(OVERDUE_EMAIL_FILE);
      const fileAge = currentTime - Math.floor(stats.mtime.getTime() / 1000);
      const fileAgeHours = Math.floor(fileAge / 3600);
      const fileAgeMinutes = Math.floor((fileAge % 3600) / 60);
      const timeLeft = ONE_DAY - fileAge;
      const hoursLeft = Math.floor(timeLeft / 3600);
      const minutesLeft = Math.floor((timeLeft % 3600) / 60);
      
      console.log(`   üìÑ OverdueEmail.json: ‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`);
      
      if (timeLeft > 0) {
        console.log(`      ‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏ü‡∏•‡πå: ${fileAgeHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${fileAgeMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ, ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ ${hoursLeft} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutesLeft} ‡∏ô‡∏≤‡∏ó‡∏µ`);
      } else {
        console.log(`      ‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏ü‡∏•‡πå: ${fileAgeHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${fileAgeMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ - ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)`);
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      if (overdueEmailData.lastCheckTime) {
        const lastCheck = new Date(overdueEmailData.lastCheckTime);
        const lastCheckAge = currentTime - Math.floor(lastCheck.getTime() / 1000);
        const lastCheckHours = Math.floor(lastCheckAge / 3600);
        const lastCheckMinutes = Math.floor((lastCheckAge % 3600) / 60);
        
        console.log(`      ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${lastCheck.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })} (${lastCheckHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${lastCheckMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß)`);
      } else {
        console.log(`      ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á`);
      }
      
      console.log(`      ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ${overdueEmailData.checkInterval / (1000 * 60 * 60)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`);
    } catch (error) {
      console.log('   üìÑ OverdueEmail.json: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ');
    }
  } else {
    console.log('   üìÑ OverdueEmail.json: ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SessionLogin.json
  if (fs.existsSync(SESSION_LOG_FILE)) {
    try {
      const sessionLogData = loadJsonFile(SESSION_LOG_FILE);
      const logCount = Array.isArray(sessionLogData) ? sessionLogData.length : 0;
      
      if (logCount > 0) {
        console.log(`   üìÑ SessionLogin.json: ${logCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ log`);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å log entry ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        const latestLog = sessionLogData[sessionLogData.length - 1];
        if (latestLog && latestLog.timestamp) {
          // ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô Unix timestamp
          let logTime;
          if (typeof latestLog.timestamp === 'string') {
            logTime = Math.floor(new Date(latestLog.timestamp).getTime() / 1000);
          } else if (typeof latestLog.timestamp === 'number') {
            logTime = latestLog.timestamp;
          } else {
            console.log(`      ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÑ‡∏î‡πâ: ${typeof latestLog.timestamp}`);
            return;
          }
          
          const logAge = currentTime - logTime;
          const logAgeMinutes = Math.floor(logAge / 60);
          const logAgeSeconds = Math.floor(logAge % 60);
          const timeLeft = TEN_MINUTES - logAge;
          const minutesLeft = Math.floor(timeLeft / 60);
          const secondsLeft = Math.floor(timeLeft % 60);
        
          if (timeLeft > 0) {
            console.log(`      ‡∏≠‡∏≤‡∏¢‡∏∏ log ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${logAgeMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ ${logAgeSeconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ, ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ ${minutesLeft} ‡∏ô‡∏≤‡∏ó‡∏µ ${secondsLeft} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
          } else {
            console.log(`      ‡∏≠‡∏≤‡∏¢‡∏∏ log ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${logAgeMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ ${logAgeSeconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ - ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)`);
          }
        } else {
          console.log(`      ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å log entries ‡πÑ‡∏î‡πâ`);
        }
      } else {
        console.log('   üìÑ SessionLogin.json: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } catch (error) {
      console.log('   üìÑ SessionLogin.json: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ');
    }
  } else {
    console.log('   üìÑ SessionLogin.json: ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
  }
  
  console.log('');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
function getCleanupStatus() {
  const now = new Date();
  const nextCleanup = new Date();
  nextCleanup.setHours(2, 0, 0, 0);
  
  if (now.getHours() >= 2) {
    nextCleanup.setDate(nextCleanup.getDate() + 1);
  }
  
  const timeUntilCleanup = nextCleanup.getTime() - now.getTime();
  
  return {
    current_time: now.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' }),
    next_cleanup: nextCleanup.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' }),
    time_until_cleanup_minutes: Math.floor(timeUntilCleanup / 1000 / 60),
    time_until_cleanup_hours: Math.floor(timeUntilCleanup / 1000 / 60 / 60)
  };
}

// Export ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
module.exports = {
  cleanupOldData,
  scheduleCleanup,
  cleanupStoriesHistory,
  cleanupProfilePics,
  cleanupOverdueEmail,
  cleanupCleanupLog,
  cleanupSessionLog,
  getCleanupLogs,
  getCleanupStatus,
  checkCurrentDataStatus
};

// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
if (require.main === module) {
  cleanupOldData();
} 