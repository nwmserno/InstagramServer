const express = require('express');
const router = express.Router();
const fs = require('fs').promises;
const path = require('path');
const { checkUserPrivacy, sendEmail, sendBulkEmail } = require('./CheckUserPrivacy.js');
const { checkNewStories, sendBulkStoriesEmail } = require('./CheckNewStories.js');

// ‡πÄ‡∏Å‡πá‡∏ö scheduled tasks
const scheduledTasks = new Map();
const SCHEDULE_FILE = path.join(__dirname, '../data/ScheduledTasks.json');
const OVERDUE_CHECK_FILE = path.join(__dirname, '../data/OverdueEmail.json');
const BOT_PROTECTION_FILE = path.join(__dirname, '../data/BotProtection.json');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot
async function loadBotProtectionData() {
  try {
    await fs.access(BOT_PROTECTION_FILE);
    const data = await fs.readFile(BOT_PROTECTION_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
    const defaultData = {
      lastCheckTime: null,
      checkCount: 0,
      dailyCheckLimit: 50,
      resetTime: null,
      minIntervalMinutes: 5,
      maxChecksPerHour: 10,
      hourlyChecks: [],
      dailyChecks: []
    };
    await fs.writeFile(BOT_PROTECTION_FILE, JSON.stringify(defaultData, null, 2));
    return defaultData;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot
async function saveBotProtectionData(data) {
  try {
    await fs.writeFile(BOT_PROTECTION_FILE, JSON.stringify(data, null, 2));
  } catch (error) {
    console.log(`‚ùå Error ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot: ${error.message}`);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
async function checkBotProtection() {
  const protectionData = await loadBotProtectionData();
  const now = new Date();
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Emergency Mode (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
  const emergencyCheck = await checkEmergencyMode();
  if (!emergencyCheck.canCheck) {
    return emergencyCheck;
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Safety Mode
  if (protectionData.safetyMode.enabled) {
    const safetyStart = new Date(protectionData.safetyMode.activationTime);
    const safetyEnd = new Date(safetyStart.getTime() + protectionData.safetyMode.durationMinutes * 60 * 1000);
    
    if (now < safetyEnd) {
      const remainingMinutes = Math.ceil((safetyEnd.getTime() - now.getTime()) / (1000 * 60));
      console.log(`üö® Safety Mode ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏£‡∏≠ ${remainingMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ (${protectionData.safetyMode.triggeredBy})`);
      return {
        canCheck: false,
        reason: `Safety Mode: ${protectionData.safetyMode.triggeredBy} - ‡∏£‡∏≠ ${remainingMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`,
        remainingMinutes,
        safetyMode: true
      };
    } else {
      // ‡∏õ‡∏¥‡∏î Safety Mode
      protectionData.safetyMode.enabled = false;
      protectionData.safetyMode.triggeredBy = null;
      protectionData.safetyMode.activationTime = null;
      console.log(`‚úÖ ‡∏õ‡∏¥‡∏î Safety Mode`);
    }
  }
  
  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
  if (!protectionData.resetTime || new Date(protectionData.resetTime) <= now) {
    protectionData.checkCount = 0;
    protectionData.hourlyChecks = [];
    protectionData.dailyChecks = [];
    protectionData.resetTime = new Date(now.getTime() + 24 * 60 * 60 * 1000).toISOString();
    protectionData.advancedProtection.sessionManagement.sessionCount = 0;
    protectionData.advancedProtection.requestPatterns.consecutiveCount = 0;
    protectionData.advancedProtection.errorHandling.errorCount = 0;
    console.log(`üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô`);
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
  protectionData.hourlyChecks = protectionData.hourlyChecks.filter(time => new Date(time) > oneHourAgo);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
  const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
  protectionData.dailyChecks = protectionData.dailyChecks.filter(time => new Date(time) > oneDayAgo);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Session Management
  if (protectionData.advancedProtection.sessionManagement.currentSessionStart) {
    const sessionStart = new Date(protectionData.advancedProtection.sessionManagement.currentSessionStart);
    const sessionTimeout = new Date(sessionStart.getTime() + protectionData.advancedProtection.sessionManagement.sessionTimeoutMinutes * 60 * 1000);
    
    if (now > sessionTimeout) {
      protectionData.advancedProtection.sessionManagement.currentSessionStart = null;
      console.log(`‚è∞ Session ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ - ‡πÄ‡∏£‡∏¥‡πà‡∏° Session ‡πÉ‡∏´‡∏°‡πà`);
    }
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Request Patterns
  if (protectionData.advancedProtection.requestPatterns.lastConsecutiveTime) {
    const lastConsecutive = new Date(protectionData.advancedProtection.requestPatterns.lastConsecutiveTime);
    const cooldownEnd = new Date(lastConsecutive.getTime() + protectionData.advancedProtection.requestPatterns.cooldownMinutes * 60 * 1000);
    
    if (now < cooldownEnd) {
      const remainingMinutes = Math.ceil((cooldownEnd.getTime() - now.getTime()) / (1000 * 60));
      console.log(`‚è∞ Cooldown ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á - ‡∏£‡∏≠ ${remainingMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`);
      return {
        canCheck: false,
        reason: `Cooldown ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á - ‡∏£‡∏≠ ${remainingMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`,
        remainingMinutes
      };
    } else {
      protectionData.advancedProtection.requestPatterns.consecutiveCount = 0;
    }
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Error Handling
  if (protectionData.advancedProtection.errorHandling.lastErrorTime) {
    const lastError = new Date(protectionData.advancedProtection.errorHandling.lastErrorTime);
    const errorCooldownEnd = new Date(lastError.getTime() + protectionData.advancedProtection.errorHandling.errorCooldownMinutes * 60 * 1000);
    
    if (now < errorCooldownEnd) {
      const remainingMinutes = Math.ceil((errorCooldownEnd.getTime() - now.getTime()) / (1000 * 60));
      console.log(`‚è∞ Cooldown ‡∏´‡∏•‡∏±‡∏á Error - ‡∏£‡∏≠ ${remainingMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`);
      return {
        canCheck: false,
        reason: `Cooldown ‡∏´‡∏•‡∏±‡∏á Error - ‡∏£‡∏≠ ${remainingMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`,
        remainingMinutes
      };
    }
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Time-based Restrictions
  const currentHour = now.getHours();
  const currentMinute = now.getMinutes();
  const currentTime = `${currentHour.toString().padStart(2, '0')}:${currentMinute.toString().padStart(2, '0')}`;
  
  let timeMultiplier = 1.0;
  
  // Peak Hours (09:00-18:00) - ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  if (currentTime >= protectionData.advancedProtection.timeBasedRestrictions.peakHours.start && 
      currentTime <= protectionData.advancedProtection.timeBasedRestrictions.peakHours.end) {
    timeMultiplier = protectionData.advancedProtection.timeBasedRestrictions.peakHours.reducedLimit;
    console.log(`üìä Peak Hours - ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô ${timeMultiplier * 100}%`);
  }
  
  // Night Mode (22:00-06:00) - ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏Å
  if (protectionData.advancedProtection.timeBasedRestrictions.nightMode.enabled) {
    if (currentTime >= protectionData.advancedProtection.timeBasedRestrictions.nightMode.start || 
        currentTime <= protectionData.advancedProtection.timeBasedRestrictions.nightMode.end) {
      timeMultiplier = protectionData.advancedProtection.timeBasedRestrictions.nightMode.reducedLimit;
      console.log(`üåô Night Mode - ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô ${timeMultiplier * 100}%`);
    }
  }
  
  // Weekend/Holiday Mode
  const weekendHolidayMultiplier = await checkWeekendHolidayMode();
  timeMultiplier *= weekendHolidayMultiplier;
  
  // Progressive Backoff
  const progressiveBackoffMinutes = await checkProgressiveBackoff();
  if (progressiveBackoffMinutes > 0) {
    console.log(`‚è∞ Progressive Backoff - ‡∏£‡∏≠ ${progressiveBackoffMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`);
    return {
      canCheck: false,
      reason: `Progressive Backoff - ‡∏£‡∏≠ ${progressiveBackoffMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`,
      remainingMinutes: progressiveBackoffMinutes
    };
  }
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ï‡∏≤‡∏° Time Multiplier
  const adjustedHourlyLimit = Math.floor(protectionData.maxChecksPerHour * timeMultiplier);
  const adjustedDailyLimit = Math.floor(protectionData.dailyCheckLimit * timeMultiplier);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  if (protectionData.lastCheckTime) {
    const lastCheck = new Date(protectionData.lastCheckTime);
    const timeDiff = now.getTime() - lastCheck.getTime();
    const minutesDiff = Math.floor(timeDiff / (1000 * 60));
    
    if (minutesDiff < protectionData.minIntervalMinutes) {
      const remainingMinutes = protectionData.minIntervalMinutes - minutesDiff;
      console.log(`‚è∞ ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ ${remainingMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot)`);
      return {
        canCheck: false,
        reason: `‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ ${remainingMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ`,
        remainingMinutes
      };
    }
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß)
  if (protectionData.hourlyChecks.length >= adjustedHourlyLimit) {
    const oldestCheck = new Date(protectionData.hourlyChecks[0]);
    const timeUntilReset = 60 - Math.floor((now.getTime() - oldestCheck.getTime()) / (1000 * 60));
    console.log(`‚è∞ ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î ${adjustedHourlyLimit} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot) - ‡∏£‡∏≠ ${timeUntilReset} ‡∏ô‡∏≤‡∏ó‡∏µ`);
    return {
      canCheck: false,
      reason: `‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î ${adjustedHourlyLimit} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á - ‡∏£‡∏≠ ${timeUntilReset} ‡∏ô‡∏≤‡∏ó‡∏µ`,
      remainingMinutes: timeUntilReset
    };
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß)
  if (protectionData.dailyChecks.length >= adjustedDailyLimit) {
    console.log(`‚è∞ ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î ${adjustedDailyLimit} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot)`);
    return {
      canCheck: false,
      reason: `‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î ${adjustedDailyLimit} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô`,
      remainingMinutes: 1440 // 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    };
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Session Limit
  if (protectionData.advancedProtection.sessionManagement.sessionCount >= protectionData.advancedProtection.sessionManagement.maxSessionsPerDay) {
    console.log(`‚è∞ ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î Session ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot)`);
    return {
      canCheck: false,
      reason: `‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î Session ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô`,
      remainingMinutes: 1440 // 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    };
  }
  
  return { 
    canCheck: true,
    timeMultiplier,
    adjustedLimits: {
      hourly: adjustedHourlyLimit,
      daily: adjustedDailyLimit
    }
  };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
async function recordCheck(success = true, responseTime = 0) {
  const protectionData = await loadBotProtectionData();
  const now = new Date();
  
  protectionData.lastCheckTime = now.toISOString();
  protectionData.checkCount++;
  protectionData.hourlyChecks.push(now.toISOString());
  protectionData.dailyChecks.push(now.toISOString());
  
  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  protectionData.statistics.totalRequests++;
  if (success) {
    protectionData.statistics.successfulRequests++;
    protectionData.statistics.lastSuccessTime = now.toISOString();
    protectionData.statistics.consecutiveSuccesses++;
    protectionData.statistics.consecutiveFailures = 0; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  } else {
    protectionData.statistics.failedRequests++;
    protectionData.statistics.lastFailureTime = now.toISOString();
    protectionData.statistics.consecutiveFailures++;
    protectionData.statistics.consecutiveSuccesses = 0; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
  }
  
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Response Time
  if (responseTime > 0) {
    protectionData.statistics.responseTimes.push(responseTime);
    if (protectionData.statistics.responseTimes.length > 100) {
      protectionData.statistics.responseTimes.shift(); // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    }
    protectionData.statistics.averageResponseTime = protectionData.statistics.responseTimes.reduce((a, b) => a + b, 0) / protectionData.statistics.responseTimes.length;
  }
  
  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï Success Rate
  if (protectionData.statistics.totalRequests > 0) {
    protectionData.advancedProtection.adaptiveLimits.currentSuccessRate = protectionData.statistics.successfulRequests / protectionData.statistics.totalRequests;
  }
  
  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï Request Patterns
  if (protectionData.advancedProtection.requestPatterns.lastConsecutiveTime) {
    const lastConsecutive = new Date(protectionData.advancedProtection.requestPatterns.lastConsecutiveTime);
    const timeDiff = now.getTime() - lastConsecutive.getTime();
    
    if (timeDiff < 5 * 60 * 1000) { // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ
      protectionData.advancedProtection.requestPatterns.consecutiveCount++;
      protectionData.advancedProtection.requestPatterns.lastConsecutiveTime = now.toISOString();
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î
      if (protectionData.advancedProtection.requestPatterns.consecutiveCount >= protectionData.advancedProtection.requestPatterns.maxConsecutiveRequests) {
        console.log(`‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á - ‡πÄ‡∏£‡∏¥‡πà‡∏° Cooldown`);
      }
    } else {
      protectionData.advancedProtection.requestPatterns.consecutiveCount = 1;
      protectionData.advancedProtection.requestPatterns.lastConsecutiveTime = now.toISOString();
    }
  } else {
    protectionData.advancedProtection.requestPatterns.consecutiveCount = 1;
    protectionData.advancedProtection.requestPatterns.lastConsecutiveTime = now.toISOString();
  }
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏° Session ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
  if (!protectionData.advancedProtection.sessionManagement.currentSessionStart) {
    protectionData.advancedProtection.sessionManagement.currentSessionStart = now.toISOString();
    protectionData.advancedProtection.sessionManagement.sessionCount++;
    console.log(`üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° Session ‡πÉ‡∏´‡∏°‡πà (${protectionData.advancedProtection.sessionManagement.sessionCount}/${protectionData.advancedProtection.sessionManagement.maxSessionsPerDay})`);
  }
  
  await saveBotProtectionData(protectionData);
  
  console.log(`üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö - ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${protectionData.dailyChecks.length}/${protectionData.dailyCheckLimit}, ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ô‡∏µ‡πâ: ${protectionData.hourlyChecks.length}/${protectionData.maxChecksPerHour}, Success Rate: ${(protectionData.advancedProtection.adaptiveLimits.currentSuccessRate * 100).toFixed(1)}%`);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Error ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Safety Mode
async function recordError(errorMessage) {
  const protectionData = await loadBotProtectionData();
  const now = new Date();
  
  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  protectionData.statistics.consecutiveFailures++;
  protectionData.statistics.consecutiveSuccesses = 0;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Suspicious Error ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isSuspicious = protectionData.advancedProtection.errorHandling.suspiciousErrors.some(
    suspicious => errorMessage.toLowerCase().includes(suspicious.toLowerCase())
  );
  
  if (isSuspicious) {
    console.log(`üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö Suspicious Error: ${errorMessage}`);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Error Count
    protectionData.advancedProtection.errorHandling.errorCount++;
    protectionData.advancedProtection.errorHandling.lastErrorTime = now.toISOString();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î Error
    if (protectionData.advancedProtection.errorHandling.errorCount >= protectionData.advancedProtection.errorHandling.maxErrorsPerHour) {
      console.log(`üö® ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î Error ‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á - ‡πÄ‡∏õ‡∏¥‡∏î Safety Mode`);
      
      // ‡πÄ‡∏õ‡∏¥‡∏î Safety Mode
      protectionData.safetyMode.enabled = true;
      protectionData.safetyMode.triggeredBy = `Suspicious Error: ${errorMessage}`;
      protectionData.safetyMode.activationTime = now.toISOString();
      
      await saveBotProtectionData(protectionData);
      return;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Emergency Mode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Critical Errors
    const criticalErrors = ['blocked', 'suspended', 'disabled', 'captcha', 'checkpoint'];
    const isCritical = criticalErrors.some(critical => errorMessage.toLowerCase().includes(critical.toLowerCase()));
    
    if (isCritical && protectionData.statistics.consecutiveFailures >= 3) {
      console.log(`üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö Critical Error - ‡πÄ‡∏õ‡∏¥‡∏î Emergency Mode`);
      
      // ‡πÄ‡∏õ‡∏¥‡∏î Emergency Mode
      protectionData.emergencyMode.enabled = true;
      protectionData.emergencyMode.triggeredBy = `Critical Error: ${errorMessage}`;
      protectionData.emergencyMode.activationTime = now.toISOString();
      
      await saveBotProtectionData(protectionData);
      return;
    }
  }
  
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Error ‡∏õ‡∏Å‡∏ï‡∏¥
  await recordCheck(false);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Random Delay
async function getRandomDelay() {
  const protectionData = await loadBotProtectionData();
  const { minSeconds, maxSeconds } = protectionData.advancedProtection.randomDelays;
  
  if (!protectionData.advancedProtection.randomDelays.enabled) {
    return 30; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  }
  
  const delay = Math.floor(Math.random() * (maxSeconds - minSeconds + 1)) + minSeconds;
  return delay;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Human-like Delay
async function getHumanLikeDelay() {
  const protectionData = await loadBotProtectionData();
  const { typingDelay, readingDelay, thinkingDelay } = protectionData.advancedProtection.behavioralPatterns.humanLikeDelays;
  
  if (!protectionData.advancedProtection.behavioralPatterns.humanLikeDelays.enabled) {
    return 0;
  }
  
  const typingTime = Math.floor(Math.random() * (typingDelay.maxMs - typingDelay.minMs + 1)) + typingDelay.minMs;
  const readingTime = Math.floor(Math.random() * (readingDelay.maxMs - readingDelay.minMs + 1)) + readingDelay.minMs;
  const thinkingTime = Math.floor(Math.random() * (thinkingDelay.maxMs - thinkingDelay.minMs + 1)) + thinkingDelay.minMs;
  
  return (typingTime + readingTime + thinkingTime) / 1000; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Emergency Mode
async function checkEmergencyMode() {
  const protectionData = await loadBotProtectionData();
  
  if (protectionData.emergencyMode.enabled) {
    const activationTime = new Date(protectionData.emergencyMode.activationTime);
    const emergencyEnd = new Date(activationTime.getTime() + protectionData.emergencyMode.durationHours * 60 * 60 * 1000);
    const now = new Date();
    
    if (now < emergencyEnd) {
      const remainingHours = Math.ceil((emergencyEnd.getTime() - now.getTime()) / (1000 * 60 * 60));
      console.log(`üö® EMERGENCY MODE ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏£‡∏≠ ${remainingHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (${protectionData.emergencyMode.triggeredBy})`);
      return {
        canCheck: false,
        reason: `EMERGENCY MODE: ${protectionData.emergencyMode.triggeredBy} - ‡∏£‡∏≠ ${remainingHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`,
        remainingHours,
        emergencyMode: true
      };
    } else {
      // ‡∏õ‡∏¥‡∏î Emergency Mode
      protectionData.emergencyMode.enabled = false;
      protectionData.emergencyMode.triggeredBy = null;
      protectionData.emergencyMode.activationTime = null;
      await saveBotProtectionData(protectionData);
      console.log(`‚úÖ ‡∏õ‡∏¥‡∏î Emergency Mode`);
    }
  }
  
  return { canCheck: true };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Progressive Backoff
async function checkProgressiveBackoff() {
  const protectionData = await loadBotProtectionData();
  const { consecutiveFailures } = protectionData.statistics;
  const { baseDelayMinutes, maxDelayHours, multiplier } = protectionData.advancedProtection.progressiveBackoff;
  
  if (!protectionData.advancedProtection.progressiveBackoff.enabled || consecutiveFailures === 0) {
    return 0;
  }
  
  const delayMinutes = Math.min(baseDelayMinutes * Math.pow(multiplier, consecutiveFailures - 1), maxDelayHours * 60);
  return delayMinutes;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Weekend/Holiday Mode
async function checkWeekendHolidayMode() {
  const protectionData = await loadBotProtectionData();
  const now = new Date();
  const dayOfWeek = now.getDay(); // 0 = Sunday, 6 = Saturday
  
  let multiplier = 1.0;
  
  // Weekend Mode
  if (protectionData.advancedProtection.timeBasedRestrictions.weekendMode.enabled) {
    if (dayOfWeek === 0 || dayOfWeek === 6) { // Sunday or Saturday
      multiplier *= protectionData.advancedProtection.timeBasedRestrictions.weekendMode.reducedLimit;
      console.log(`üìÖ Weekend Mode - ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô ${(multiplier * 100).toFixed(1)}%`);
    }
  }
  
  // Holiday Mode (Thai holidays - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
  if (protectionData.advancedProtection.geographicSimulation.holidayMode.enabled) {
    const month = now.getMonth() + 1;
    const day = now.getDate();
    
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÑ‡∏ó‡∏¢ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ)
    const thaiHolidays = [
      { month: 1, day: 1 },   // ‡∏ß‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà
      { month: 4, day: 13 },  // ‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå
      { month: 5, day: 5 },   // ‡∏ß‡∏±‡∏ô‡∏â‡∏±‡∏ï‡∏£‡∏°‡∏á‡∏Ñ‡∏•
      { month: 12, day: 10 }, // ‡∏ß‡∏±‡∏ô‡∏£‡∏±‡∏ê‡∏ò‡∏£‡∏£‡∏°‡∏ô‡∏π‡∏ç
      { month: 12, day: 31 }  // ‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏õ‡∏µ
    ];
    
    const isHoliday = thaiHolidays.some(holiday => holiday.month === month && holiday.day === day);
    if (isHoliday) {
      multiplier *= protectionData.advancedProtection.geographicSimulation.holidayMode.reducedLimit;
      console.log(`üéâ Holiday Mode - ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô ${(multiplier * 100).toFixed(1)}%`);
    }
  }
  
  return multiplier;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Instagram
async function checkAccountStatus() {
  const protectionData = await loadBotProtectionData();
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Emergency Mode
  if (protectionData.emergencyMode.enabled) {
    const activationTime = new Date(protectionData.emergencyMode.activationTime);
    const emergencyEnd = new Date(activationTime.getTime() + protectionData.emergencyMode.durationHours * 60 * 60 * 1000);
    const now = new Date();
    
    if (now < emergencyEnd) {
      const remainingHours = Math.ceil((emergencyEnd.getTime() - now.getTime()) / (1000 * 60 * 60));
      return {
        status: 'EMERGENCY',
        message: `‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô - ‡∏£‡∏≠ ${remainingHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`,
        remainingHours,
        triggeredBy: protectionData.emergencyMode.triggeredBy
      };
    }
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Safety Mode
  if (protectionData.safetyMode.enabled) {
    const activationTime = new Date(protectionData.safetyMode.activationTime);
    const safetyEnd = new Date(activationTime.getTime() + protectionData.safetyMode.durationMinutes * 60 * 1000);
    const now = new Date();
    
    if (now < safetyEnd) {
      const remainingMinutes = Math.ceil((safetyEnd.getTime() - now.getTime()) / (1000 * 60));
      return {
        status: 'SAFETY',
        message: `‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ - ‡∏£‡∏≠ ${remainingMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`,
        remainingMinutes,
        triggeredBy: protectionData.safetyMode.triggeredBy
      };
    }
  }
  
  return {
    status: 'NORMAL',
    message: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
    canCheck: true
  };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username
async function delayBetweenChecks(seconds = 30) {
  console.log(`‚è≥ ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ${seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot)...`);
  await new Promise(resolve => setTimeout(resolve, seconds * 1000));
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
async function safeCheckUsernames(usernames, checkFunction, type = 'unknown') {
  const results = [];
  const errors = [];
  const validResults = [];
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot ‡∏Å‡πà‡∏≠‡∏ô
  const botCheck = await checkBotProtection();
  if (!botCheck.canCheck) {
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ: ${botCheck.reason}`);
  }
  
  console.log(`üîí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ${type} ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${usernames.length} username`);
  console.log(`üìä ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î: ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${botCheck.adjustedLimits?.hourly || 'N/A'}, ‡∏ß‡∏±‡∏ô ${botCheck.adjustedLimits?.daily || 'N/A'}, Time Multiplier: ${botCheck.timeMultiplier || 1}`);
  
  for (let i = 0; i < usernames.length; i++) {
    const username = usernames[i];
    const startTime = Date.now();
    
    try {
      console.log(`   üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ${type}: @${username} (${i + 1}/${usernames.length})`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
      const individualBotCheck = await checkBotProtection();
      if (!individualBotCheck.canCheck) {
        console.log(`   ‚è∞ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ${individualBotCheck.reason}`);
        break;
      }
      
      // Human-like delay ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
      const humanDelay = await getHumanLikeDelay();
      if (humanDelay > 0) {
        console.log(`   üß† Human-like delay: ${humanDelay.toFixed(1)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
        await new Promise(resolve => setTimeout(resolve, humanDelay * 1000));
      }
      
      const result = await checkFunction(username);
      const responseTime = Date.now() - startTime;
      
      if (result && !result.error) {
        validResults.push(result);
        results.push(result);
        console.log(`   ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ${type} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: @${username} (${responseTime}ms)`);
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        await recordCheck(true, responseTime);
      } else {
        const errorMsg = result?.error || 'Unknown error';
        errors.push({ username, error: errorMsg });
        console.log(`   ‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ${type}: @${username} - ${errorMsg}`);
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Error ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Safety Mode
        await recordError(errorMsg);
      }
      
      // Random delay ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
      if (i < usernames.length - 1) {
        const randomDelay = await getRandomDelay();
        console.log(`   ‚è≥ Random delay: ${randomDelay} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
        await new Promise(resolve => setTimeout(resolve, randomDelay * 1000));
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Session Break
      const protectionData = await loadBotProtectionData();
      if (protectionData.advancedProtection.behavioralPatterns.sessionBreaks.enabled) {
        const breakChance = Math.random();
        if (breakChance < protectionData.advancedProtection.behavioralPatterns.sessionBreaks.breakProbability) {
          const breakMinutes = Math.floor(Math.random() * 
            (protectionData.advancedProtection.behavioralPatterns.sessionBreaks.maxBreakMinutes - 
             protectionData.advancedProtection.behavioralPatterns.sessionBreaks.minBreakMinutes + 1)) + 
             protectionData.advancedProtection.behavioralPatterns.sessionBreaks.minBreakMinutes;
          
          console.log(`   ‚òï Session Break: ‡∏û‡∏±‡∏Å ${breakMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`);
          await new Promise(resolve => setTimeout(resolve, breakMinutes * 60 * 1000));
        }
      }
      
    } catch (error) {
      const responseTime = Date.now() - startTime;
      errors.push({ username, error: error.message });
      console.log(`   ‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ${type}: @${username} - ${error.message}`);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Error ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Safety Mode
      await recordError(error.message);
      
      // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å error (‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤)
      if (i < usernames.length - 1) {
        const errorDelay = 120; // 2 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á error
        console.log(`   ‚è≥ Error delay: ${errorDelay} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
        await new Promise(resolve => setTimeout(resolve, errorDelay * 1000));
      }
    }
  }
  
  console.log(`‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ${type} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${validResults.length}/${usernames.length} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
  
  return {
    results,
    errors,
    validResults,
    totalChecked: results.length + errors.length
  };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á
async function loadOverdueCheckData() {
  try {
    await fs.access(OVERDUE_CHECK_FILE);
    const data = await fs.readFile(OVERDUE_CHECK_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
    const defaultData = {
      lastCheckTime: null,
      checkInterval: 86400000 // 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÉ‡∏ô‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    };
    await fs.writeFile(OVERDUE_CHECK_FILE, JSON.stringify(defaultData, null, 2));
    return defaultData;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á
async function saveOverdueCheckData(data) {
  try {
    await fs.writeFile(OVERDUE_CHECK_FILE, JSON.stringify(data, null, 2));
  } catch (error) {
    console.log(`‚ùå Error ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á: ${error.message}`);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
async function shouldCheckOverdueEmails() {
  const checkData = await loadOverdueCheckData();
  const now = new Date();
  
  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ
  if (!checkData.lastCheckTime) {
    return true;
  }
  
  const lastCheck = new Date(checkData.lastCheckTime);
  const timeDiff = now.getTime() - lastCheck.getTime();
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  return timeDiff >= checkData.checkInterval;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î scheduled tasks ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
async function loadScheduledTasks() {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    try {
      await fs.access(SCHEDULE_FILE);
    } catch (accessError) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡∏•‡πà‡∏≤
      console.log(`üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå scheduled tasks ‡πÉ‡∏´‡∏°‡πà`);
      await fs.writeFile(SCHEDULE_FILE, '{}');
    }
    
    const data = await fs.readFile(SCHEDULE_FILE, 'utf8');
    const tasks = JSON.parse(data);
    
    // ‡∏•‡πâ‡∏≤‡∏á scheduled tasks ‡πÄ‡∏î‡∏¥‡∏°
    scheduledTasks.clear();
    
    console.log(`üìã ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î scheduled tasks: ${Object.keys(tasks).length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡πÇ‡∏´‡∏•‡∏î tasks ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
    for (const [taskId, task] of Object.entries(tasks)) {
      scheduledTasks.set(taskId, task);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      await checkAndSendOverdueEmails(taskId, task);
      
      // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      scheduleTask(taskId, task);
    }
    
    console.log(`üìã ‡πÇ‡∏´‡∏•‡∏î scheduled tasks ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${scheduledTasks.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
  } catch (error) {
    console.log(`üìã Error ‡πÇ‡∏´‡∏•‡∏î scheduled tasks: ${error.message}`);
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error
    try {
      await fs.writeFile(SCHEDULE_FILE, '{}');
      console.log(`üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå scheduled tasks ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å error`);
    } catch (writeError) {
      console.log(`‚ùå Error ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå scheduled tasks: ${writeError.message}`);
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å scheduled tasks ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
async function saveScheduledTasks() {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
    const dir = path.dirname(SCHEDULE_FILE);
    try {
      await fs.access(dir);
    } catch (accessError) {
      console.log(`üìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data`);
      await fs.mkdir(dir, { recursive: true });
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á copy ‡∏Ç‡∏≠‡∏á tasks ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° timeoutId
    const tasksToSave = {};
    for (const [taskId, task] of scheduledTasks.entries()) {
      const { timeoutId, ...taskWithoutTimeout } = task;
      tasksToSave[taskId] = taskWithoutTimeout;
    }
    
    await fs.writeFile(SCHEDULE_FILE, JSON.stringify(tasksToSave, null, 2));
    console.log(`üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å scheduled tasks: ${scheduledTasks.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
  } catch (error) {
    console.log(`‚ùå Error ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å scheduled tasks: ${error.message}`);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á task ID
function generateTaskId(type, email) {
  return `${type}_${email}_${Date.now()}`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
async function checkAndSendOverdueEmails(taskId, task) {
  const { type, usernames, email, checkFrequency, nextRunTime, lastRunTime } = task;
  
  if (!nextRunTime) return;
  
  const now = new Date();
  const nextRun = new Date(nextRunTime);
  
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  if (nextRun <= now) {
    console.log(`üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà: ${type} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${email} (‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ ${Math.round((now - nextRun) / 1000 / 60)} ‡∏ô‡∏≤‡∏ó‡∏µ)`);
    
    try {
      if (type === 'privacy') {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
        const results = [];
        const errors = [];
        
        const validResults = [];
        for (const username of usernames) {
          try {
            console.log(`   üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy: @${username}`);
            const result = await checkUserPrivacy(username);
            if (result && !result.error) {
              validResults.push(result);
              results.push(result);
              console.log(`   ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: @${username}`);
            } else {
              errors.push({ username, error: result?.error || 'Unknown error' });
              console.log(`   ‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy: @${username} - ${result?.error || 'Unknown error'}`);
            }
          } catch (error) {
            errors.push({ username, error: error.message });
            console.log(`   ‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy: @${username} - ${error.message}`);
          }
        }
        
        // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if (validResults.length > 0) {
          await sendBulkEmail(validResults, email, true);
          console.log(`   ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• Privacy ‡∏£‡∏ß‡∏° ${validResults.length} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        }
        
        const successCount = results.length;
        const errorCount = errors.length;
        console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• Privacy ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${successCount}/${usernames.length} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        if (errorCount > 0) {
          console.log(`‚ö†Ô∏è  ‡∏°‡∏µ ${errorCount} usernames ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î error:`);
          errors.forEach(({ username, error }) => {
            console.log(`   - @${username}: ${error}`);
          });
        }
        
      } else if (type === 'stories') {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stories ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
        const results = [];
        const errors = [];
        
        for (const username of usernames) {
          try {
            console.log(`   üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stories: @${username}`);
            const result = await checkNewStories(username);
            if (result && !result.error) {
              const emailContent = {
                username: result.username,
                full_name: result.full_name || username,
                story_count: result.story_count || 0,
                new_story_count: result.new_story_count || 0,
                new_stories: result.new_stories || [],
                message: result.message || '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô'
              };
              await sendStoriesEmail(username, emailContent, email, true);
              results.push(result);
              console.log(`   ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• Stories ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: @${username}`);
            } else {
              errors.push({ username, error: result?.error || 'Unknown error' });
              console.log(`   ‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stories: @${username} - ${result?.error || 'Unknown error'}`);
            }
          } catch (error) {
            errors.push({ username, error: error.message });
            console.log(`   ‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stories: @${username} - ${error.message}`);
          }
        }
        
        const successCount = results.length;
        const errorCount = errors.length;
        console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• Stories ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${successCount}/${usernames.length} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        if (errorCount > 0) {
          console.log(`‚ö†Ô∏è  ‡∏°‡∏µ ${errorCount} usernames ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î error:`);
          errors.forEach(({ username, error }) => {
            console.log(`   - @${username}: ${error}`);
          });
        }
      }
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      task.lastRunTime = new Date().toISOString();
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      const interval = getIntervalFromFrequency(checkFrequency);
      task.nextRunTime = new Date(now.getTime() + interval).toISOString();
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
      await saveScheduledTasks();
      
      console.log(`üìù ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${type}: ${new Date(task.nextRunTime).toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`);
      
    } catch (error) {
      console.log(`‚ùå Error ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà ${type}: ${error.message}`);
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
function scheduleTask(taskId, task) {
  const { type, usernames, email, checkFrequency, nextRunTime } = task;
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  const now = new Date();
  let nextRun = new Date(nextRunTime);
  
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
  if (nextRun <= now) {
    const interval = getIntervalFromFrequency(checkFrequency);
    task.nextRunTime = new Date(now.getTime() + interval).toISOString();
    nextRun = new Date(task.nextRunTime);
  }
  
  const timeUntilNext = nextRun.getTime() - now.getTime();
  
  console.log(`‚è∞ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ${type} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${email}: ${new Date(nextRun).toLocaleString('th-TH')} (${Math.round(timeUntilNext / 1000 / 60)} ‡∏ô‡∏≤‡∏ó‡∏µ)`);
  
  // ‡∏ï‡∏±‡πâ‡∏á timeout
  const timeoutId = setTimeout(async () => {
    await executeScheduledTask(taskId, task);
  }, timeUntilNext);
  
  // ‡πÄ‡∏Å‡πá‡∏ö timeout ID
  task.timeoutId = timeoutId;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì interval ‡∏à‡∏≤‡∏Å frequency
function getIntervalFromFrequency(checkFrequency) {
  switch (checkFrequency) {
    case 0: // every5Minutes
      return 5 * 60 * 1000;
    case 1: // every30Minutes
      return 30 * 60 * 1000;
    case 2: // everyHour
      return 60 * 60 * 1000;
    case 3: // every3Hours
      return 3 * 60 * 60 * 1000;
    case 4: // every6Hours
      return 6 * 60 * 60 * 1000;
    case 5: // every8Hours
      return 8 * 60 * 60 * 1000;
    case 6: // every12Hours
      return 12 * 60 * 60 * 1000;
    case 7: // everyDay
      return 24 * 60 * 60 * 1000;
    default:
      return 12 * 60 * 60 * 1000; // 12 hours
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
async function executeScheduledTask(taskId, task) {
  const { type, usernames, email, checkFrequency } = task;
  
  console.log(`üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤: ${type} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${email}`);
  
  try {
    if (type === 'privacy') {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy
      const results = [];
      const errors = [];
      
      const validResults = [];
      for (const username of usernames) {
        try {
          console.log(`   üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy: @${username}`);
          const result = await checkUserPrivacy(username);
          if (result && !result.error) {
            validResults.push(result);
            results.push(result);
            console.log(`   ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: @${username}`);
          } else {
            errors.push({ username, error: result?.error || 'Unknown error' });
            console.log(`   ‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy: @${username} - ${result?.error || 'Unknown error'}`);
          }
        } catch (error) {
          errors.push({ username, error: error.message });
          console.log(`   ‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy: @${username} - ${error.message}`);
        }
      }
      
      // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (validResults.length > 0) {
        await sendBulkEmail(validResults, email, true);
        console.log(`   ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• Privacy ‡∏£‡∏ß‡∏° ${validResults.length} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      }
      
      const successCount = results.length;
      const errorCount = errors.length;
      console.log(`‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${successCount}/${usernames.length} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      if (errorCount > 0) {
        console.log(`‚ö†Ô∏è  ‡∏°‡∏µ ${errorCount} usernames ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î error:`);
        errors.forEach(({ username, error }) => {
          console.log(`   - @${username}: ${error}`);
        });
      }
      
    } else if (type === 'stories') {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stories
      const results = [];
      const errors = [];
      
      const validResults = [];
      for (const username of usernames) {
        try {
          console.log(`   üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stories: @${username}`);
          const result = await checkNewStories(username);
          if (result && !result.error) {
            validResults.push(result);
            results.push(result);
            console.log(`   ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stories ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: @${username}`);
          } else {
            errors.push({ username, error: result?.error || 'Unknown error' });
            console.log(`   ‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stories: @${username} - ${result?.error || 'Unknown error'}`);
          }
        } catch (error) {
          errors.push({ username, error: error.message });
          console.log(`   ‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stories: @${username} - ${error.message}`);
        }
      }
      
      // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (validResults.length > 0) {
        await sendBulkStoriesEmail(validResults, email, true);
        console.log(`   ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• Stories ‡∏£‡∏ß‡∏° ${validResults.length} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      }
      
      const successCount = results.length;
      const errorCount = errors.length;
      console.log(`‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stories ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${successCount}/${usernames.length} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      if (errorCount > 0) {
        console.log(`‚ö†Ô∏è  ‡∏°‡∏µ ${errorCount} usernames ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î error:`);
        errors.forEach(({ username, error }) => {
          console.log(`   - @${username}: ${error}`);
        });
      }
    }
    
    // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    const interval = getIntervalFromFrequency(checkFrequency);
    task.nextRunTime = new Date(Date.now() + interval).toISOString();
    task.lastRunTime = new Date().toISOString();
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    await saveScheduledTasks();
    scheduleTask(taskId, task);
    
  } catch (error) {
    console.log(`‚ùå Error ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ ${type}: ${error.message}`);
    
    // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÅ‡∏°‡πâ‡πÄ‡∏Å‡∏¥‡∏î error
    const interval = getIntervalFromFrequency(checkFrequency);
    task.nextRunTime = new Date(Date.now() + interval).toISOString();
    await saveScheduledTasks();
    scheduleTask(taskId, task);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function checkAllOverdueEmails() {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const shouldCheck = await shouldCheckOverdueEmails();
  
  if (!shouldCheck) {
    const checkData = await loadOverdueCheckData();
    const lastCheck = new Date(checkData.lastCheckTime);
    const now = new Date();
    const timeDiff = now.getTime() - lastCheck.getTime();
    const hoursRemaining = Math.ceil((checkData.checkInterval - timeDiff) / (1000 * 60 * 60));
    
    console.log(`‚è∞ ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${lastCheck.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`);
    console.log(`‚è∞ ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô ${hoursRemaining} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`);
    return;
  }
  
  console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...`);
  
  const now = new Date();
  let overdueCount = 0;
  let processedCount = 0;
  
  for (const [taskId, task] of scheduledTasks.entries()) {
    const { type, usernames, email, nextRunTime } = task;
    
    if (nextRunTime) {
      const nextRun = new Date(nextRunTime);
      if (nextRun <= now) {
        overdueCount++;
        console.log(`üìß ‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà: ${type} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${email} (‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ ${Math.round((now - nextRun) / 1000 / 60)} ‡∏ô‡∏≤‡∏ó‡∏µ)`);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥)
        const shouldCheck = await shouldCheckOverdueEmails();
        if (shouldCheck) {
          // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
          try {
            await checkAndSendOverdueEmails(taskId, task);
            processedCount++;
          } catch (error) {
            console.log(`‚ùå Error ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà ${type} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${email}: ${error.message}`);
          }
        } else {
          console.log(`‚è∞ ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà ${type} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${email} - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ`);
        }
      }
    }
  }
  
  if (overdueCount > 0) {
    console.log(`üìß ‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà ${overdueCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${processedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
  } else {
    console.log(`‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà`);
  }
  
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const checkData = await loadOverdueCheckData();
  checkData.lastCheckTime = now.toISOString();
  await saveOverdueCheckData(checkData);
  console.log(`üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á: ${now.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`);
}

// ‡πÇ‡∏´‡∏•‡∏î scheduled tasks ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
loadScheduledTasks().then(async () => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á
  const shouldCheck = await shouldCheckOverdueEmails();
  
  if (shouldCheck) {
    console.log(`üîç ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÉ‡∏ô 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...`);
    setTimeout(checkAllOverdueEmails, 2000); // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°
  } else {
    const checkData = await loadOverdueCheckData();
    const lastCheck = new Date(checkData.lastCheckTime);
    const now = new Date();
    const timeDiff = now.getTime() - lastCheck.getTime();
    const hoursRemaining = Math.ceil((checkData.checkInterval - timeDiff) / (1000 * 60 * 60));
    
    console.log(`‚è∞ ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${lastCheck.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`);
    console.log(`‚è∞ ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô ${hoursRemaining} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`);
  }
});

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log
router.use((req, res, next) => {
  const now = new Date();
  const timestamp = now.toLocaleString('th-TH', { 
    timeZone: 'Asia/Bangkok',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
  
  console.log(`üì° [${timestamp}] ${req.method} ${req.path}`);
  
  // Log request body ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö POST requests
  if (req.method === 'POST' && req.body) {
    if (req.path === '/check-privacy') {
      const { usernames, email, notification } = req.body;
      console.log(`   üë§ Usernames: ${usernames?.join(', ') || 'N/A'}`);
      console.log(`   üìß Email: ${email || 'N/A'}`);
      console.log(`   üîî Notification: ${notification ? 'Yes' : 'No'}`);
    } else if (req.path === '/check-new-stories') {
      const { usernames, email, notification } = req.body;
      console.log(`   üë§ Usernames: ${usernames?.join(', ') || 'N/A'}`);
      console.log(`   üìß Email: ${email || 'N/A'}`);
      console.log(`   üîî Notification: ${notification ? 'Yes' : 'No'}`);
    }
  }
  
  next();
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy
router.post('/check-privacy', async (req, res) => {
  try {
    const { usernames, email, notification = false } = req.body;
    
    if (!usernames || !Array.isArray(usernames) || usernames.length === 0) {
      console.log(`   ‚ùå Error: ‡πÑ‡∏°‡πà‡∏°‡∏µ usernames`);
      return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ usernames' });
    }

    console.log(`   üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${usernames.length} usernames`);
    
    try {
      // ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot
      const checkResult = await safeCheckUsernames(usernames, checkUserPrivacy, 'Privacy');
      
      // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (email && checkResult.validResults.length > 0) {
        console.log(`   üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏ß‡∏° ${checkResult.validResults.length} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ`);
        const changes = req.body.changes || null;
        await sendBulkEmail(checkResult.validResults, email, notification, changes);
      }
      
      res.json({ 
        results: checkResult.results,
        botProtection: {
          totalChecked: checkResult.totalChecked,
          successCount: checkResult.validResults.length,
          errorCount: checkResult.errors.length
        }
      });
    } catch (error) {
      console.log(`   ‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ${error.message}`);
      res.status(429).json({ 
        error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ', 
        reason: error.message,
        retryAfter: 300 // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
      });
    }

    console.log(`   üéâ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${results.filter(r => !r.error).length}/${results.length} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    res.json({ results });
  } catch (error) {
    console.log(`   üí• Error ‡πÉ‡∏ô check-privacy endpoint: ${error.message}`);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stories
router.post('/check-new-stories', async (req, res) => {
  try {
    const { usernames, email, notification = false } = req.body;
    
    if (!usernames || !Array.isArray(usernames) || usernames.length === 0) {
      console.log(`   ‚ùå Error: ‡πÑ‡∏°‡πà‡∏°‡∏µ usernames`);
      return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ usernames' });
    }

    console.log(`   üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stories ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${usernames.length} usernames`);
    
    try {
      // ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot
      const checkResult = await safeCheckUsernames(usernames, checkNewStories, 'Stories');
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      const validResults = checkResult.validResults.map(result => ({
        username: result.username,
        full_name: result.full_name || result.username,
        story_count: result.story_count || 0,
        new_story_count: result.new_story_count || 0,
        new_stories: result.new_stories || [],
        message: result.message || '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô'
      }));
      
      // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (email && validResults.length > 0) {
        console.log(`   üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏ß‡∏° ${validResults.length} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ`);
        const changes = req.body.changes || null;
        await sendBulkStoriesEmail(validResults, email, notification, changes);
      }
      
      res.json({ 
        results: checkResult.results,
        botProtection: {
          totalChecked: checkResult.totalChecked,
          successCount: checkResult.validResults.length,
          errorCount: checkResult.errors.length
        }
      });
    } catch (error) {
      console.log(`   ‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ${error.message}`);
      res.status(429).json({ 
        error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ', 
        reason: error.message,
        retryAfter: 300 // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
      });
    }
  } catch (error) {
    console.log(`   üí• Error ‡πÉ‡∏ô check-new-stories endpoint: ${error.message}`);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' });
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Stories
async function sendStoriesEmail(username, info, email, isNotification = false, changes = null) {
  try {
  const nodemailer = require('nodemailer');
  let transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS
    }
  });

  if (!email) return;
  
  const now = new Date();
    let subject, textContent;
    
    if (changes) {
      // ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
      subject = `[‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á] ‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà: @${username}`;
      textContent = `\n==== ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà ====\n\n`;
      textContent += `Username: @${username}\n`;
      textContent += `‡∏ä‡∏∑‡πà‡∏≠: ${info.full_name}\n`;
      textContent += `‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà: ${info.new_story_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`;
      textContent += `‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á:\n${changes}`;
      textContent += `‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ${now.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}\n\n`;
      textContent += `‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà\n`;
      textContent += `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ IG Story Checker\n`;
    } else if (isNotification) {
      // ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö scheduled
    subject = `[‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥] ‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà: @${username}`;
      textContent = `\n==== ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ - ‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà ====\n\n`;
      textContent += `Username: @${username}\n`;
      textContent += `‡∏ä‡∏∑‡πà‡∏≠: ${info.full_name}\n`;
      textContent += `‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà: ${info.new_story_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`;
      textContent += `‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ${now.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}\n\n`;
      textContent += `‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ\n`;
      textContent += `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ IG Story Checker\n`;
  } else {
      // ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
    subject = `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà: @${username}`;
      textContent = `\n==== ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà ====\n\n`;
      textContent += `Username: @${username}\n`;
      textContent += `‡∏ä‡∏∑‡πà‡∏≠: ${info.full_name}\n`;
      textContent += `‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà: ${info.new_story_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`;
      textContent += `‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ${now.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}\n\n`;
      textContent += `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ IG Story Checker\n`;
    }
    
    let htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <style>
          body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
          .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); overflow: hidden; }
          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }
          .header h1 { margin: 0; font-size: 24px; font-weight: 300; }
          .content { padding: 30px; }
          .story-info { background: #f8f9fa; border-radius: 8px; padding: 20px; margin-bottom: 25px; border-left: 4px solid #667eea; }
          .story-item { background: white; border: 1px solid #e9ecef; border-radius: 8px; padding: 15px; margin-bottom: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.05); }
          .story-type { display: inline-block; padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: bold; }
          .type-image { background: #d4edda; color: #155724; }
          .type-video { background: #cce5ff; color: #004085; }
          .new-badge { background: #dc3545; color: white; padding: 2px 6px; border-radius: 3px; font-size: 10px; margin-left: 8px; }
          .footer { background: #f8f9fa; padding: 20px; text-align: center; color: #666; border-top: 1px solid #e9ecef; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üì± ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà</h1>
          </div>
          <div class="content">
            <div class="story-info">
              <h3>üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà</h3>
              <p><strong>Username:</strong> @${info.username}</p>
              <p><strong>‡∏ä‡∏∑‡πà‡∏≠:</strong> ${info.full_name}</p>
              <p><strong>‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà:</strong> ${info.new_story_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
              <p><strong>‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:</strong> ${now.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}</p>
            </div>
            
            <h3 style="color: #333; margin-bottom: 20px;">üì∏ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà</h3>
    `;

    if (info.new_story_count > 0 && info.new_stories) {
      info.new_stories.forEach((story, index) => {
        const typeClass = story.media_type === '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û' ? 'type-image' : 'type-video';
        
        htmlContent += `
          <div class="story-item">
            <div style="margin-bottom: 10px;">
              <span class="story-type ${typeClass}">${story.media_type}</span>
              <span class="new-badge">‡πÉ‡∏´‡∏°‡πà</span>
              ${story.duration ? `<span style="margin-left: 10px; color: #666;">‚è±Ô∏è ${story.duration}s</span>` : ''}
            </div>
            <p><strong>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏û‡∏™‡∏ï‡πå:</strong> ${story.taken_at}</p>
            ${story.url ? `<p><strong>‡∏•‡∏¥‡∏á‡∏Å‡πå:</strong> <a href="${story.url}" target="_blank">‡∏î‡∏π‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà</a></p>` : ''}
          </div>
        `;
      });
    } else {
      htmlContent += `
        <div class="story-item">
          <p style="text-align: center; color: #666; font-style: italic;">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà</p>
        </div>
      `;
    }

    htmlContent += `
          </div>
          <div class="footer">
            <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ IG Story Checker</p>
            <p style="font-size: 12px; margin-top: 10px;">üìß ‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</p>
          </div>
        </div>
      </body>
      </html>
    `;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á plain text version ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
    if (!changes && !isNotification) {
      textContent += `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà:\n`;
      if (info.new_story_count > 0 && info.new_stories) {
        info.new_stories.forEach((story, index) => {
          textContent += `${index + 1}. ${story.media_type} [‡πÉ‡∏´‡∏°‡πà]\n`;
          textContent += `   ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏û‡∏™‡∏ï‡πå: ${story.taken_at}\n`;
          if (story.duration) textContent += `   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: ${story.duration} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n`;
          textContent += `\n`;
        });
      } else {
        textContent += `‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà\n`;
      }
    }

    await transporter.sendMail({
      from: `IG Story Checker <${process.env.EMAIL_USER}>`,
      to: email,
      subject,
      text: textContent,
      html: htmlContent
    });

    console.log(`   üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏• Stories ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${email}`);
  } catch (error) {
    console.log(`   ‚ùå Error ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• Stories: ${error.message}`);
    throw error;
  }
}

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
router.post('/schedule-notification', async (req, res) => {
  try {
    const { type, usernames, email, checkFrequency, isActive } = req.body;
    
    console.log(`üìÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${type} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${email}`);
    console.log(`   üë§ Usernames: ${usernames?.join(', ')}`);
    console.log(`   ‚è∞ Frequency: ${checkFrequency}`);
    console.log(`   üîî Active: ${isActive}`);
    
    if (!type || !usernames || !email || checkFrequency === undefined) {
      return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ type, usernames, email, ‡πÅ‡∏•‡∏∞ checkFrequency' });
    }
    
    // ‡∏´‡∏¢‡∏∏‡∏î task ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const existingTaskId = Array.from(scheduledTasks.keys()).find(key => 
      key.startsWith(`${type}_${email}_`)
    );
    
    if (existingTaskId) {
      const existingTask = scheduledTasks.get(existingTaskId);
      if (existingTask.timeoutId) {
        clearTimeout(existingTask.timeoutId);
      }
      scheduledTasks.delete(existingTaskId);
      console.log(`üõë ‡∏´‡∏¢‡∏∏‡∏î task ‡πÄ‡∏î‡∏¥‡∏°: ${existingTaskId}`);
    }
    
    if (isActive) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á task ‡πÉ‡∏´‡∏°‡πà
      const taskId = generateTaskId(type, email);
      const now = new Date();
      const interval = getIntervalFromFrequency(checkFrequency);
      const nextRunTime = new Date(now.getTime() + interval).toISOString();
      
      const task = {
        type,
        usernames,
        email,
        checkFrequency,
        isActive,
        createdAt: now.toISOString(),
        nextRunTime,
        lastRunTime: null
      };
      
      scheduledTasks.set(taskId, task);
      scheduleTask(taskId, task);
      await saveScheduledTasks();
      
      console.log(`‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${taskId}`);
      res.json({ 
        success: true, 
        taskId,
        nextRunTime,
        message: `‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ${type} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      });
    } else {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á task ‡∏ó‡∏µ‡πà‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      const taskId = generateTaskId(type, email);
      const now = new Date();
      
      const task = {
        type,
        usernames,
        email,
        checkFrequency,
        isActive: false,
        createdAt: now.toISOString(),
        nextRunTime: null,
        lastRunTime: null
      };
      
      scheduledTasks.set(taskId, task);
      await saveScheduledTasks();
      
      console.log(`‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${type} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${email}`);
      res.json({ 
        success: true, 
        taskId,
        message: `‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ${type} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      });
    }
    
  } catch (error) {
    console.log(`‚ùå Error ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${error.message}`);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤' });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ scheduled tasks
router.get('/scheduled-tasks', async (req, res) => {
  try {
    const tasks = Array.from(scheduledTasks.entries()).map(([taskId, task]) => ({
      taskId,
      type: task.type,
      email: task.email,
      usernames: task.usernames,
      checkFrequency: task.checkFrequency,
      isActive: task.isActive,
      createdAt: task.createdAt,
      nextRunTime: task.nextRunTime,
      lastRunTime: task.lastRunTime
    }));
    
    res.json({ tasks });
  } catch (error) {
    console.log(`‚ùå Error ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• scheduled tasks: ${error.message}`);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
router.post('/check-overdue-emails', async (req, res) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const shouldCheck = await shouldCheckOverdueEmails();
    
    if (!shouldCheck) {
      const checkData = await loadOverdueCheckData();
      const lastCheck = new Date(checkData.lastCheckTime);
      const now = new Date();
      const timeDiff = now.getTime() - lastCheck.getTime();
      const hoursRemaining = Math.ceil((checkData.checkInterval - timeDiff) / (1000 * 60 * 60));
      
      console.log(`‚è∞ ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${lastCheck.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`);
      console.log(`‚è∞ ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô ${hoursRemaining} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`);
      
      return res.json({
        message: `‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${lastCheck.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`,
        nextCheckIn: `${hoursRemaining} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`,
        skipped: true
      });
    }
    
    console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà...`);
    
    const now = new Date();
    let processedCount = 0;
    let successCount = 0;
    let totalErrors = [];
    
    for (const [taskId, task] of scheduledTasks.entries()) {
      const { type, usernames, email, nextRunTime, isActive } = task;
      
      if (!isActive || !nextRunTime) continue;
      
      const nextRun = new Date(nextRunTime);
      if (nextRun <= now) {
        processedCount++;
        console.log(`üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà: ${type} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${email} (‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ ${Math.round((now - nextRun) / 1000 / 60)} ‡∏ô‡∏≤‡∏ó‡∏µ)`);
        
        try {
          if (type === 'privacy') {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
            const results = [];
            const errors = [];
            
            const validResults = [];
            for (const username of usernames) {
              try {
                console.log(`   üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy: @${username}`);
                const result = await checkUserPrivacy(username);
                if (result && !result.error) {
                  validResults.push(result);
                  results.push(result);
                  console.log(`   ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: @${username}`);
                } else {
                  errors.push({ username, error: result?.error || 'Unknown error' });
                  console.log(`   ‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy: @${username} - ${result?.error || 'Unknown error'}`);
                }
              } catch (error) {
                errors.push({ username, error: error.message });
                console.log(`   ‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Privacy: @${username} - ${error.message}`);
              }
            }
            
            // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            if (validResults.length > 0) {
              await sendBulkEmail(validResults, email, true);
              console.log(`   ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• Privacy ‡∏£‡∏ß‡∏° ${validResults.length} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
            }
            
            successCount += results.length;
            totalErrors.push(...errors.map(e => ({ ...e, type: 'privacy', email })));
            console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• Privacy ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${results.length}/${usernames.length} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
            if (errors.length > 0) {
              console.log(`‚ö†Ô∏è  ‡∏°‡∏µ ${errors.length} usernames ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î error:`);
              errors.forEach(({ username, error }) => {
                console.log(`   - @${username}: ${error}`);
              });
            }
            
          } else if (type === 'stories') {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stories ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
            const results = [];
            const errors = [];
            
            const validResults = [];
            for (const username of usernames) {
              try {
                console.log(`   üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stories: @${username}`);
                const result = await checkNewStories(username);
                if (result && !result.error) {
                  const emailContent = {
                    username: result.username,
                    full_name: result.full_name || username,
                    story_count: result.story_count || 0,
                    new_story_count: result.new_story_count || 0,
                    new_stories: result.new_stories || [],
                    message: result.message || '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô'
                  };
                  validResults.push(emailContent);
                  results.push(result);
                  console.log(`   ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stories ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: @${username}`);
                } else {
                  errors.push({ username, error: result?.error || 'Unknown error' });
                  console.log(`   ‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stories: @${username} - ${result?.error || 'Unknown error'}`);
                }
              } catch (error) {
                errors.push({ username, error: error.message });
                console.log(`   ‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Stories: @${username} - ${error.message}`);
              }
            }
            
            // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            if (validResults.length > 0) {
              await sendBulkStoriesEmail(validResults, email, true);
              console.log(`   ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• Stories ‡∏£‡∏ß‡∏° ${validResults.length} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
            }
            
            successCount += results.length;
            totalErrors.push(...errors.map(e => ({ ...e, type: 'stories', email })));
            console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• Stories ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${results.length}/${usernames.length} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
            if (errors.length > 0) {
              console.log(`‚ö†Ô∏è  ‡∏°‡∏µ ${errors.length} usernames ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î error:`);
              errors.forEach(({ username, error }) => {
                console.log(`   - @${username}: ${error}`);
              });
            }
          }
          
          // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
          task.lastRunTime = new Date().toISOString();
          
        } catch (error) {
          console.log(`‚ùå Error ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà ${type}: ${error.message}`);
        }
      }
    }
    
    await saveScheduledTasks();
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const checkData = await loadOverdueCheckData();
    checkData.lastCheckTime = new Date().toISOString();
    await saveOverdueCheckData(checkData);
    console.log(`üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`);
    
    console.log(`üìß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${successCount}/${processedCount} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    if (totalErrors.length > 0) {
      console.log(`‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalErrors.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      totalErrors.forEach(({ username, error, type, email }) => {
        console.log(`   - @${username} (${type}): ${error}`);
      });
    }
    
    res.json({ 
      success: true, 
      processedCount,
      successCount,
      errorCount: totalErrors.length,
      errors: totalErrors,
      message: `‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${successCount}/${processedCount} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à${totalErrors.length > 0 ? ` (‡∏°‡∏µ ${totalErrors.length} ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)` : ''}`,
      checkTime: new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })
    });
    
  } catch (error) {
    console.log(`‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà: ${error.message}`);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà' });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á
router.get('/overdue-check-status', async (req, res) => {
  try {
    const checkData = await loadOverdueCheckData();
    const now = new Date();
    
    if (!checkData.lastCheckTime) {
      return res.json({
        lastCheckTime: null,
        nextCheckTime: null,
        canCheckNow: true,
        message: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á'
      });
    }
    
    const lastCheck = new Date(checkData.lastCheckTime);
    const timeDiff = now.getTime() - lastCheck.getTime();
    const canCheckNow = timeDiff >= checkData.checkInterval;
    const nextCheckTime = new Date(lastCheck.getTime() + checkData.checkInterval);
    const hoursRemaining = Math.ceil((checkData.checkInterval - timeDiff) / (1000 * 60 * 60));
    
    res.json({
      lastCheckTime: lastCheck.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' }),
      nextCheckTime: nextCheckTime.toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' }),
      canCheckNow,
      hoursRemaining: canCheckNow ? 0 : hoursRemaining,
      checkInterval: checkData.checkInterval / (1000 * 60 * 60), // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      message: canCheckNow 
        ? '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß' 
        : `‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô ${hoursRemaining} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`
    });
  } catch (error) {
    console.log(`‚ùå Error ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á: ${error.message}`);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot
router.get('/bot-protection-status', async (req, res) => {
  try {
    const protectionData = await loadBotProtectionData();
    const now = new Date();
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
    
    const hourlyChecks = protectionData.hourlyChecks.filter(time => new Date(time) > oneHourAgo);
    const dailyChecks = protectionData.dailyChecks.filter(time => new Date(time) > oneDayAgo);
    
    let timeUntilNextCheck = 0;
    if (protectionData.lastCheckTime) {
      const lastCheck = new Date(protectionData.lastCheckTime);
      const timeDiff = now.getTime() - lastCheck.getTime();
      const minutesDiff = Math.floor(timeDiff / (1000 * 60));
      timeUntilNextCheck = Math.max(0, protectionData.minIntervalMinutes - minutesDiff);
    }
    
    const botCheck = await checkBotProtection();
    
    res.json({
      canCheck: botCheck.canCheck,
      reason: botCheck.reason || null,
      remainingMinutes: botCheck.remainingMinutes || 0,
      timeUntilNextCheck,
      limits: {
        daily: {
          current: dailyChecks.length,
          limit: protectionData.dailyCheckLimit,
          remaining: Math.max(0, protectionData.dailyCheckLimit - dailyChecks.length)
        },
        hourly: {
          current: hourlyChecks.length,
          limit: protectionData.maxChecksPerHour,
          remaining: Math.max(0, protectionData.maxChecksPerHour - hourlyChecks.length)
        },
        minIntervalMinutes: protectionData.minIntervalMinutes
      },
      lastCheckTime: protectionData.lastCheckTime ? new Date(protectionData.lastCheckTime).toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' }) : null,
      resetTime: protectionData.resetTime ? new Date(protectionData.resetTime).toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' }) : null,
      message: botCheck.canCheck ? '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ' : botCheck.reason
    });
  } catch (error) {
    console.log(`‚ùå Error ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot: ${error.message}`);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot
router.post('/reset-bot-protection', async (req, res) => {
  try {
    const protectionData = await loadBotProtectionData();
    const now = new Date();
    
    protectionData.checkCount = 0;
    protectionData.hourlyChecks = [];
    protectionData.dailyChecks = [];
    protectionData.lastCheckTime = null;
    protectionData.resetTime = new Date(now.getTime() + 24 * 60 * 60 * 1000).toISOString();
    protectionData.safetyMode.enabled = false;
    protectionData.safetyMode.triggeredBy = null;
    protectionData.safetyMode.activationTime = null;
    protectionData.emergencyMode.enabled = false;
    protectionData.emergencyMode.triggeredBy = null;
    protectionData.emergencyMode.activationTime = null;
    
    await saveBotProtectionData(protectionData);
    
    console.log(`üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
    
    res.json({
      success: true,
      message: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
      resetTime: new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })
    });
  } catch (error) {
    console.log(`‚ùå Error ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bot: ${error.message}`);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï' });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
router.get('/account-status', async (req, res) => {
  try {
    const status = await checkAccountStatus();
    res.json(status);
  } catch (error) {
    console.log(`‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${error.message}`);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á
router.post('/reset-overdue-check', async (req, res) => {
  try {
    const checkData = await loadOverdueCheckData();
    checkData.lastCheckTime = null;
    await saveOverdueCheckData(checkData);
    
    console.log(`üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
    
    res.json({
      success: true,
      message: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ',
      resetTime: new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })
    });
  } catch (error) {
    console.log(`‚ùå Error ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á: ${error.message}`);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï' });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï scheduled task
router.put('/scheduled-task/:taskId', async (req, res) => {
  try {
    const { taskId } = req.params;
    const { usernames, email, checkFrequency, isActive } = req.body;
    
    if (!scheduledTasks.has(taskId)) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö scheduled task' });
    }
    
    const task = scheduledTasks.get(taskId);
    
    // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤
    if (task.timeoutId) {
      clearTimeout(task.timeoutId);
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    task.usernames = usernames || task.usernames;
    task.email = email || task.email;
    task.checkFrequency = checkFrequency !== undefined ? checkFrequency : task.checkFrequency;
    task.isActive = isActive !== undefined ? isActive : task.isActive;
    task.lastRunTime = null; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    task.nextRunTime = null; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤ isActive = true
    if (task.isActive) {
      scheduleTask(taskId, task);
    }
    
    await saveScheduledTasks();
    
    console.log(`‚úèÔ∏è ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï scheduled task: ${taskId}`);
    res.json({ 
      success: true, 
      message: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï scheduled task ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      task: {
        taskId,
        type: task.type,
        usernames: task.usernames,
        email: task.email,
        checkFrequency: task.checkFrequency,
        isActive: task.isActive,
        nextRunTime: task.nextRunTime
      }
    });
  } catch (error) {
    console.log(`‚ùå Error ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï scheduled task: ${error.message}`);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï' });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö scheduled task
router.delete('/scheduled-task/:taskId', async (req, res) => {
  try {
    const { taskId } = req.params;
    
    if (scheduledTasks.has(taskId)) {
      const task = scheduledTasks.get(taskId);
      if (task.timeoutId) {
        clearTimeout(task.timeoutId);
      }
      scheduledTasks.delete(taskId);
      await saveScheduledTasks();
      
      console.log(`üóëÔ∏è ‡∏•‡∏ö scheduled task: ${taskId}`);
      res.json({ success: true, message: '‡∏•‡∏ö scheduled task ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } else {
      res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö scheduled task' });
    }
  } catch (error) {
    console.log(`‚ùå Error ‡∏•‡∏ö scheduled task: ${error.message}`);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ session
router.get('/session-status', async (req, res) => {
  try {
    const sessionManager = require('./SessionManager');
    const status = sessionManager.getSessionStatus();
    
    res.json({
      success: true,
      session: status,
      message: status.isLoggedIn 
        ? 'Session ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' 
        : 'Session ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
    });
  } catch (error) {
    console.log(`‚ùå Error ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ session: ${error.message}`);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ session' });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä session
router.post('/refresh-session', async (req, res) => {
  try {
    const sessionManager = require('./SessionManager');
    await sessionManager.refreshSession();
    
    res.json({
      success: true,
      message: '‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });
  } catch (error) {
    console.log(`‚ùå Error ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä session: ${error.message}`);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä session' });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logout
router.post('/logout', async (req, res) => {
  try {
    const sessionManager = require('./SessionManager');
    await sessionManager.logout();
    
    res.json({
      success: true,
      message: 'Logout ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });
  } catch (error) {
    console.log(`‚ùå Error logout: ${error.message}`);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ logout' });
  }
});

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
router.get('/test-connection', async (req, res) => {
  try {
    const sessionManager = require('./SessionManager');
    const isConnected = await sessionManager.checkConnection();
    
    res.json({
      success: true,
      connected: isConnected,
      message: isConnected 
        ? '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏Å‡∏ï‡∏¥' 
        : '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤'
    });
  } catch (error) {
    console.log(`‚ùå Error ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ${error.message}`);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠' });
  }
});

module.exports = router; 
