const { IgApiClient } = require('instagram-private-api');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πá‡∏ö session
const SESSION_FILE = path.join(__dirname, '..', 'data', 'InstagramSession.json');

class SessionManager {
  constructor() {
    this.ig = new IgApiClient();
    this.isLoggedIn = false;
    this.lastLoginTime = null;
    this.sessionTimeout = 48 * 60 * 60 * 1000; // 48 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£ login ‡∏ö‡πà‡∏≠‡∏¢)
    this.maxRetries = 3;
    this.retryDelay = 15000; // 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô rate limiting)
    this.loginAttempts = 0;
    this.lastLoginAttempt = null;
    this.maxLoginAttemptsPerHour = 3; // ‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    this.sessionRotationInterval = 24 * 60 * 60 * 1000; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô session ‡∏ó‡∏∏‡∏Å 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    this.deviceRotationEnabled = true;
    this.currentDeviceIndex = 0;
    this.sessionOnlyMode = true; // ‡πÇ‡∏´‡∏°‡∏î‡πÉ‡∏ä‡πâ session ‡πÄ‡∏â‡∏¢‡πÜ
    this.aggressiveSessionRotation = false; // ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô session ‡∏ö‡πà‡∏≠‡∏¢
  }

  // ‡πÇ‡∏´‡∏•‡∏î session ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
  loadSession() {
    try {
      if (fs.existsSync(SESSION_FILE)) {
        const data = fs.readFileSync(SESSION_FILE, 'utf8');
        if (data.trim()) {
          const session = JSON.parse(data);
          return session;
        }
      }
    } catch (error) {
      console.log('‚ùå Error ‡πÇ‡∏´‡∏•‡∏î session:', error.message);
    }
    return null;
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
  saveSession() {
    try {
      const session = {
        state: this.ig.state.serialize(),
        lastLoginTime: new Date().toISOString(),
        deviceString: this.ig.state.deviceString,
        uuid: this.ig.state.uuid,
        phoneId: this.ig.state.phoneId,
        adid: this.ig.state.adid,
        build: this.ig.state.build,
        username: process.env.IG_USERNAME, // ‡πÄ‡∏û‡∏¥‡πà‡∏° username ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        passwordHash: this.hashPassword(process.env.IG_PASSWORD) // ‡πÄ‡∏û‡∏¥‡πà‡∏° hash ‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      };
      
      fs.writeFileSync(SESSION_FILE, JSON.stringify(session, null, 2));
      console.log('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      console.log('‚ùå Error ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session:', error.message);
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á hash ‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á)
  hashPassword(password) {
    const crypto = require('crypto');
    return crypto.createHash('sha256').update(password).digest('hex');
  }

  // ‡∏•‡∏ö session
  clearSession() {
    try {
      if (fs.existsSync(SESSION_FILE)) {
        fs.unlinkSync(SESSION_FILE);
        console.log('üóëÔ∏è ‡∏•‡∏ö session ‡πÄ‡∏Å‡πà‡∏≤');
      }
    } catch (error) {
      console.log('‚ùå Error ‡∏•‡∏ö session:', error.message);
    }
    this.isLoggedIn = false;
    this.lastLoginTime = null;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ session ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isSessionValid() {
    if (!this.isLoggedIn || !this.lastLoginTime) {
      return false;
    }

    const now = new Date();
    const lastLogin = new Date(this.lastLoginTime);
    const timeDiff = now.getTime() - lastLogin.getTime();

    return timeDiff < this.sessionTimeout;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô session ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  shouldRotateSession() {
    if (!this.lastLoginTime) {
      return true;
    }

    const now = new Date();
    const lastLogin = new Date(this.lastLoginTime);
    const timeDiff = now.getTime() - lastLogin.getTime();

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î session ‡πÄ‡∏â‡∏¢‡πÜ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ session ‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
    if (this.sessionOnlyMode && !this.aggressiveSessionRotation) {
      // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô session ‡∏ó‡∏∏‡∏Å 7 ‡∏ß‡∏±‡∏ô (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤)
      return timeDiff > (7 * 24 * 60 * 60 * 1000);
    }

    // ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô session ‡∏ó‡∏∏‡∏Å 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    return timeDiff > this.sessionRotationInterval;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á session
  isSessionSafe() {
    try {
      const savedSession = this.loadSession();
      if (!savedSession) {
        return false;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ session ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
      const lastLogin = new Date(savedSession.lastLoginTime);
      const now = new Date();
      const daysSinceLogin = (now.getTime() - lastLogin.getTime()) / (1000 * 60 * 60 * 24);

      // Session ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 30 ‡∏ß‡∏±‡∏ô
      return daysSinceLogin < 30;
    } catch (error) {
      return false;
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á device string ‡πÉ‡∏´‡∏°‡πà
  generateNewDevice() {
    const devices = [
      // Samsung Galaxy S21
      {
        deviceString: "30/11; 420dpi; 1080x2400; samsung; SM-G991B; o1s; qcom",
        build: "RP1A.200720.012"
      },
      // iPhone 13
      {
        deviceString: "25/15.0; 390dpi; 1170x2532; apple; iPhone14,2; iPhone14,2; qcom",
        build: "19A346"
      },
      // Google Pixel 6
      {
        deviceString: "31/12; 420dpi; 1080x2400; google; Pixel 6; redfin; qcom",
        build: "SP2A.220505.002"
      },
      // OnePlus 9
      {
        deviceString: "30/11; 420dpi; 1080x2400; OnePlus; LE2113; lemonade; qcom",
        build: "RKQ1.201217.002"
      }
    ];

    this.currentDeviceIndex = (this.currentDeviceIndex + 1) % devices.length;
    return devices[this.currentDeviceIndex];
  }



  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ credentials ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isCredentialsChanged() {
    try {
      const savedSession = this.loadSession();
      if (!savedSession) {
        return true; // ‡πÑ‡∏°‡πà‡∏°‡∏µ session ‡πÄ‡∏Å‡πà‡∏≤ = ‡∏ï‡πâ‡∏≠‡∏á login ‡πÉ‡∏´‡∏°‡πà
      }

      const currentUsername = process.env.IG_USERNAME;
      const currentPasswordHash = this.hashPassword(process.env.IG_PASSWORD);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡πÅ‡∏•‡∏∞ password hash
      if (savedSession.username !== currentUsername || 
          savedSession.passwordHash !== currentPasswordHash) {
        console.log('üîç ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á credentials:');
        console.log(`   - Username ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô: ${savedSession.username} -> ${currentUsername}`);
        console.log(`   - Password ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô: ${savedSession.passwordHash !== currentPasswordHash ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`);
        return true;
      }

      return false;
    } catch (error) {
      console.log('‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö credentials:', error.message);
      return true; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ login ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£ login
  canAttemptLogin() {
    const now = new Date();
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    if (this.lastLoginAttempt) {
      const timeDiff = now.getTime() - this.lastLoginAttempt.getTime();
      if (timeDiff > 60 * 60 * 1000) { // 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        this.loginAttempts = 0;
      }
    }
    
    return this.loginAttempts < this.maxLoginAttemptsPerHour;
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£ login
  incrementLoginAttempts() {
    this.loginAttempts++;
    this.lastLoginAttempt = new Date();
  }

  // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä session
  isSessionError(error) {
    const errorMessage = error.message.toLowerCase();
    const sessionErrors = [
      'login required',
      'checkpoint',
      'challenge',
      'session expired',
      'invalid session',
      'not logged in',
      'user not found',
      'rate limit',
      'temporarily blocked'
    ];
    return sessionErrors.some(err => errorMessage.includes(err));
  }

  // Login ‡∏î‡πâ‡∏ß‡∏¢ session ‡∏´‡∏£‡∏∑‡∏≠ login ‡πÉ‡∏´‡∏°‡πà
  async login(retryCount = 0) {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£ login
      if (!this.canAttemptLogin()) {
        const waitTime = Math.ceil((60 * 60 * 1000 - (new Date().getTime() - this.lastLoginAttempt.getTime())) / 1000 / 60);
        throw new Error(`‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ login ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï (${this.maxLoginAttemptsPerHour} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ ${waitTime} ‡∏ô‡∏≤‡∏ó‡∏µ`);
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ credentials ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (this.isCredentialsChanged()) {
        console.log('üîÑ ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á credentials - ‡∏•‡∏ö session ‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞ login ‡πÉ‡∏´‡∏°‡πà');
        this.clearSession();
      }

      // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ session ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤ credentials ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
      const savedSession = this.loadSession();
      if (savedSession && !this.isCredentialsChanged()) {
        try {
          console.log('üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ session ‡πÄ‡∏Å‡πà‡∏≤...');
          this.ig.state.deserialize(savedSession.state);
          this.lastLoginTime = savedSession.lastLoginTime;
          
          // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö session
          await this.ig.account.currentUser();
          this.isLoggedIn = true;
          console.log('‚úÖ ‡πÉ‡∏ä‡πâ session ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          this.logSessionActivity('login', '‡πÉ‡∏ä‡πâ session ‡πÄ‡∏Å‡πà‡∏≤');
          return true;
        } catch (error) {
          console.log('‚ùå Session ‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ:', error.message);
          this.clearSession();
        }
      }

      // Login ‡πÉ‡∏´‡∏°‡πà
      console.log(`üîê Login ‡πÉ‡∏´‡∏°‡πà... (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${retryCount + 1})`);
      this.incrementLoginAttempts();
      
      // ‡πÉ‡∏ä‡πâ device rotation ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      if (this.deviceRotationEnabled) {
        const newDevice = this.generateNewDevice();
        console.log(`üì± ‡πÉ‡∏ä‡πâ device ‡πÉ‡∏´‡∏°‡πà: ${newDevice.deviceString}`);
        this.ig.state.generateDevice(process.env.IG_USERNAME, newDevice.deviceString, newDevice.build);
      } else {
        this.ig.state.generateDevice(process.env.IG_USERNAME);
      }
      
      await this.ig.account.login(process.env.IG_USERNAME, process.env.IG_PASSWORD);
      
      this.isLoggedIn = true;
      this.lastLoginTime = new Date().toISOString();
      this.saveSession();
      
      console.log('‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      this.logSessionActivity('login', 'login ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return true;
    } catch (error) {
      console.log(`‚ùå Login ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${retryCount + 1}):`, error.message);
      
      // ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      if (retryCount < this.maxRetries - 1) {
        console.log(`‚è≥ ‡∏£‡∏≠ ${this.retryDelay / 1000} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...`);
        await this.delay(this.retryDelay);
        return this.login(retryCount + 1);
      }
      
      this.isLoggedIn = false;
      this.clearSession();
      this.logSessionActivity('login', `login ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
      throw error;
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ login ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  async ensureLogin() {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ credentials ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (this.isCredentialsChanged()) {
        console.log('üîÑ ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á credentials - ‡∏ï‡πâ‡∏≠‡∏á login ‡πÉ‡∏´‡∏°‡πà');
        this.logSessionActivity('ensure_login', 'credentials ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô - login ‡πÉ‡∏´‡∏°‡πà');
        await this.login();
        return this.ig;
      }



      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô session ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (this.shouldRotateSession()) {
        if (this.sessionOnlyMode) {
          console.log('üîÑ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô session (‡πÇ‡∏´‡∏°‡∏î session ‡πÄ‡∏â‡∏¢‡πÜ) - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô session ‡πÉ‡∏´‡∏°‡πà');
          this.logSessionActivity('ensure_login', 'session rotation - session only mode');
        } else {
          console.log('üîÑ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô session - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô session ‡πÉ‡∏´‡∏°‡πà');
          this.logSessionActivity('ensure_login', 'session rotation - normal mode');
        }
        this.clearSession();
        await this.login();
        return this.ig;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      if (this.isLoggedIn) {
        const isValid = await this.validateAndRepairSession();
        if (isValid) {
          this.logSessionActivity('ensure_login', '‡πÉ‡∏ä‡πâ session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
          return this.ig;
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session timeout
      if (!this.isSessionValid()) {
        this.logSessionActivity('ensure_login', 'session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏');
      }

      // Login ‡πÉ‡∏´‡∏°‡πà
      await this.login();
      this.logSessionActivity('ensure_login', 'login ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return this.ig;
    } catch (error) {
      this.logSessionActivity('ensure_login', `error: ${error.message}`);
      throw error;
    }
  }

  // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° retry mechanism
  async executeWithRetry(operation, maxRetries = 3) {
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      try {
        const ig = await this.ensureLogin();
        return await operation(ig);
      } catch (error) {
        console.log(`‚ùå Error (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${attempt + 1}):`, error.message);
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô session error ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä session
        if (this.isSessionError(error)) {
          console.log('üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä session ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å session error...');
          this.clearSession();
          this.isLoggedIn = false;
          
          if (attempt < maxRetries - 1) {
            await this.delay(this.retryDelay);
            continue;
          }
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ throw error
        if (attempt === maxRetries - 1) {
          throw error;
        }
        
        // ‡∏£‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        await this.delay(this.retryDelay);
      }
    }
  }

  // Logout
  async logout() {
    try {
      if (this.isLoggedIn) {
        await this.ig.account.logout();
        console.log('üëã Logout ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } catch (error) {
      console.log('‚ùå Error logout:', error.message);
    } finally {
      this.isLoggedIn = false;
      this.clearSession();
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  async checkConnection() {
    try {
      await this.ensureLogin();
      await this.ig.account.currentUser();
      return true;
    } catch (error) {
      console.log('‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤:', error.message);
      return false;
    }
  }

  // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä session
  async refreshSession() {
    console.log('üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä session...');
    this.clearSession();
    return await this.login();
  }

    // ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ session
  getSessionStatus() {
    const savedSession = this.loadSession();
    return {
      isLoggedIn: this.isLoggedIn,
      lastLoginTime: this.lastLoginTime,
      isSessionValid: this.isSessionValid(),
      sessionTimeout: this.sessionTimeout / (1000 * 60 * 60), // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      hasSessionFile: fs.existsSync(SESSION_FILE),
      loginAttempts: this.loginAttempts,
      maxLoginAttemptsPerHour: this.maxLoginAttemptsPerHour,
      canAttemptLogin: this.canAttemptLogin(),
      sessionFileSize: fs.existsSync(SESSION_FILE) ? fs.statSync(SESSION_FILE).size : 0,
      credentialsChanged: this.isCredentialsChanged(),
      savedUsername: savedSession ? savedSession.username : null,
      currentUsername: process.env.IG_USERNAME,
      hasCredentials: !!(process.env.IG_USERNAME && process.env.IG_PASSWORD),
      shouldRotateSession: this.shouldRotateSession(),
      sessionRotationInterval: this.sessionRotationInterval / (1000 * 60 * 60), // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      deviceRotationEnabled: this.deviceRotationEnabled,
      currentDeviceIndex: this.currentDeviceIndex,
      sessionOnlyMode: this.sessionOnlyMode,
      aggressiveSessionRotation: this.aggressiveSessionRotation,
      isSessionSafe: this.isSessionSafe()
    };
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô session
  logSessionActivity(action, details = '') {
    const logEntry = {
      timestamp: new Date().toISOString(),
      action: action,
      details: details,
      isLoggedIn: this.isLoggedIn,
      sessionValid: this.isSessionValid()
    };
    
    console.log(`üìù Session Log [${action}]: ${details}`);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå log (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
          const logFile = path.join(__dirname, '..', 'data', 'SessionLogin.json');
    try {
      let logs = [];
      if (fs.existsSync(logFile)) {
        logs = JSON.parse(fs.readFileSync(logFile, 'utf8'));
      }
      logs.push(logEntry);
      
      // ‡πÄ‡∏Å‡πá‡∏ö log ‡πÅ‡∏Ñ‡πà 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      if (logs.length > 100) {
        logs = logs.slice(-100);
      }
      
      fs.writeFileSync(logFile, JSON.stringify(logs, null, 2));
    } catch (error) {
      console.log('‚ùå Error ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log:', error.message);
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏° session
  async validateAndRepairSession() {
    try {
      if (!this.isLoggedIn) {
        return false;
      }

      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö session
      await this.ig.account.currentUser();
      this.logSessionActivity('session_validation', 'session ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
      return true;
    } catch (error) {
      console.log('‚ùå Session ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ:', error.message);
      this.logSessionActivity('session_validation', `session error: ${error.message}`);
      
      // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ session ‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
      const savedSession = this.loadSession();
      if (savedSession) {
        try {
          this.ig.state.deserialize(savedSession.state);
          await this.ig.account.currentUser();
          this.isLoggedIn = true;
          this.lastLoginTime = savedSession.lastLoginTime;
          this.logSessionActivity('session_repair', '‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏° session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          return true;
        } catch (repairError) {
          console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏° session ‡πÑ‡∏î‡πâ:', repairError.message);
          this.clearSession();
          return false;
        }
      }
      
      return false;
    }
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
const sessionManager = new SessionManager();

module.exports = sessionManager; 