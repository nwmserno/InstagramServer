import 'dart:async';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

enum NotificationFrequency {
  daily,
  weekly,
  monthly,
  quarterly,
  semiAnnually,
  nineMonths,
  yearly,
}

enum CheckFrequency {
  every5Minutes,
  every30Minutes,
  everyHour,
  every3Hours,
  every6Hours,
  every8Hours,
  every12Hours,
  everyDay,
}

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal() {}

  static const String _baseUrl = 'https://instagramserver-8562.onrender.com';
  Timer? _notificationTimer;
  final Map<String, Timer> _individualTimers = {};

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  Future<void> startNotificationService() async {
    print('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Notification Service (Server-Side Scheduling)');
  }

  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  void stopNotificationService() {
    _notificationTimer?.cancel();
    for (final timer in _individualTimers.values) {
      timer.cancel();
    }
    _individualTimers.clear();
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  Future<void> saveNotificationSettings({
    required String type, // 'privacy' ‡∏´‡∏£‡∏∑‡∏≠ 'stories'
    required List<String> usernames,
    required String email,
    required NotificationFrequency frequency,
    required bool isActive,
    CheckFrequency checkFrequency = CheckFrequency.every12Hours,
  }) async {
    final prefs = await SharedPreferences.getInstance();
    final settings = {
      'type': type,
      'usernames': usernames,
      'email': email,
      'frequency': frequency.index,
      'checkFrequency': checkFrequency.index,
      'isActive': isActive,
      'createdAt': DateTime.now().toIso8601String(),
      'lastCheckTime': DateTime.now().toIso8601String(),
    };

    final key = 'notification_settings_$type';
    await prefs.setString(key, jsonEncode(settings));

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    if (isActive) {
      // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
      await _scheduleNotificationOnServer(
          type, usernames, email, checkFrequency.index, false);

      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
      await _scheduleNotificationOnServer(
          type, usernames, email, checkFrequency.index, true);
    } else {
      // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      await _scheduleNotificationOnServer(
          type, usernames, email, checkFrequency.index, false);
    }
  }

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  Future<void> updateLastCheckTime(String type) async {
    final prefs = await SharedPreferences.getInstance();
    final key = 'notification_settings_$type';
    final settingsJson = prefs.getString(key);

    if (settingsJson != null) {
      final settings = jsonDecode(settingsJson);
      settings['lastCheckTime'] = DateTime.now().toIso8601String();
      await prefs.setString(key, jsonEncode(settings));
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  Future<void> checkAndUpdateLastCheckTime(String type) async {
    final prefs = await SharedPreferences.getInstance();
    final key = 'notification_settings_$type';
    final settingsJson = prefs.getString(key);

    if (settingsJson != null) {
      final settings = jsonDecode(settingsJson);
      final now = DateTime.now();

      // ‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
      String? lastCheckTimeStr;
      if (settings['lastCheckTime'] != null) {
        lastCheckTimeStr = settings['lastCheckTime'];
      } else if (settings['createdAt'] != null) {
        lastCheckTimeStr = settings['createdAt'];
      }

      if (lastCheckTimeStr != null) {
        final lastCheckTime = DateTime.parse(lastCheckTimeStr);
        final checkFrequency =
            settings['checkFrequency'] ?? 4; // default to every12Hours

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        Duration checkDuration;
        switch (checkFrequency) {
          case 0: // every5Minutes
            checkDuration = const Duration(minutes: 5);
            break;
          case 1: // every30Minutes
            checkDuration = const Duration(minutes: 30);
            break;
          case 2: // everyHour
            checkDuration = const Duration(hours: 1);
            break;
          case 3: // every3Hours
            checkDuration = const Duration(hours: 3);
            break;
          case 4: // every6Hours
            checkDuration = const Duration(hours: 6);
            break;
          case 5: // every8Hours
            checkDuration = const Duration(hours: 8);
            break;
          case 6: // every12Hours
            checkDuration = const Duration(hours: 12);
            break;
          case 7: // everyDay
            checkDuration = const Duration(days: 1);
            break;
          default:
            checkDuration = const Duration(hours: 12);
        }

        final nextCheckTime = lastCheckTime.add(checkDuration);

        // ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        if (now.isAfter(nextCheckTime)) {
          settings['lastCheckTime'] = now.toIso8601String();
          await prefs.setString(key, jsonEncode(settings));
          print(
              'üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö $type: ${now.toIso8601String()}');
        }
      }
    }
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  Future<Map<String, dynamic>?> loadNotificationSettings(String type) async {
    final prefs = await SharedPreferences.getInstance();
    final key = 'notification_settings_$type';
    final settingsJson = prefs.getString(key);

    if (settingsJson != null) {
      final settings = jsonDecode(settingsJson);
      return {
        ...settings,
        'usernames': List<String>.from(settings['usernames']),
        'frequency': NotificationFrequency.values[settings['frequency']],
        'checkFrequency': settings['checkFrequency'] ?? 4, // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô int
      };
    }
    return null;
  }

  // ‡πÅ‡∏õ‡∏•‡∏á CheckFrequency ‡πÄ‡∏õ‡πá‡∏ô Duration
  Duration _getCheckDuration(CheckFrequency frequency) {
    switch (frequency) {
      case CheckFrequency.every5Minutes:
        return const Duration(minutes: 5);
      case CheckFrequency.every30Minutes:
        return const Duration(minutes: 30);
      case CheckFrequency.everyHour:
        return const Duration(hours: 1);
      case CheckFrequency.every3Hours:
        return const Duration(hours: 3);
      case CheckFrequency.every6Hours:
        return const Duration(hours: 6);
      case CheckFrequency.every8Hours:
        return const Duration(hours: 8);
      case CheckFrequency.every12Hours:
        return const Duration(hours: 12);
      case CheckFrequency.everyDay:
        return const Duration(days: 1);
    }
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤
  Future<void> _scheduleNotificationOnServer(
    String type,
    List<String> usernames,
    String email,
    int checkFrequency,
    bool isActive,
  ) async {
    try {
      print('üì° ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á API server: $type');

      // ‡∏´‡∏≤ taskId ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      String? existingTaskId;
      try {
        final response = await http.get(
          Uri.parse('$_baseUrl/api/scheduled-tasks'),
          headers: {'Content-Type': 'application/json'},
        );

        if (response.statusCode == 200) {
          final data = jsonDecode(response.body);
          final tasks = data['tasks'] as List;
          final existingTask = tasks.firstWhere(
            (task) => task['type'] == type && task['email'] == email,
            orElse: () => null,
          );
          if (existingTask != null) {
            existingTaskId = existingTask['taskId'];
          }
        }
      } catch (e) {
        print('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤ task ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: $e');
      }

      if (existingTaskId != null && isActive) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï task ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        final updateResponse = await http.put(
          Uri.parse('$_baseUrl/api/scheduled-task/$existingTaskId'),
          headers: {'Content-Type': 'application/json'},
          body: jsonEncode({
            'usernames': usernames,
            'email': email,
            'checkFrequency': checkFrequency,
            'isActive': isActive,
          }),
        );

        if (updateResponse.statusCode == 200) {
          final data = jsonDecode(updateResponse.body);
          print('‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏ô API server ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${data['message']}');
          if (data['task']?['nextRunTime'] != null) {
            print('‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ${data['task']['nextRunTime']}');
          }
        } else {
          print(
              '‚ùå Error ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏ô API server: ${updateResponse.statusCode}');
        }
      } else {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á task ‡πÉ‡∏´‡∏°‡πà
        final response = await http.post(
          Uri.parse('$_baseUrl/api/schedule-notification'),
          headers: {'Content-Type': 'application/json'},
          body: jsonEncode({
            'type': type,
            'usernames': usernames,
            'email': email,
            'checkFrequency': checkFrequency,
            'isActive': isActive,
          }),
        );

        if (response.statusCode == 200) {
          final data = jsonDecode(response.body);
          print('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏ô API server ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${data['message']}');
          if (data['nextRunTime'] != null) {
            print('‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ${data['nextRunTime']}');
          }
        } else {
          print('‚ùå Error ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏ô API server: ${response.statusCode}');
        }
      }
    } catch (e) {
      print('‚ùå Error ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API server: $e');
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  bool isNotificationActive(String type) {
    return _individualTimers.keys.any((key) => key.startsWith('${type}_'));
  }

  // ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ username ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  List<String> getActiveUsernames(String type) {
    return _individualTimers.keys
        .where((key) => key.startsWith('${type}_'))
        .map((key) => key.replaceFirst('${type}_', ''))
        .toList();
  }

  // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö username ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
  Future<void> removeNotification(String type, String username) async {
    final timerKey = '${type}_$username';
    _individualTimers[timerKey]?.cancel();
    _individualTimers.remove(timerKey);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    final settings = await loadNotificationSettings(type);
    if (settings != null) {
      final prefs = await SharedPreferences.getInstance();
      final usernames = List<String>.from(settings['usernames']);
      usernames.remove(username);

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      if (usernames.isEmpty) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ usernames ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô API
        await _deleteNotificationFromServer(type, settings['email']);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô SharedPreferences ‡πÄ‡∏õ‡πá‡∏ô inactive
        final updatedSettings = {
          ...settings,
          'usernames': usernames,
          'isActive': false,
        };
        final key = 'notification_settings_$type';
        await prefs.setString(key, jsonEncode(updatedSettings));
      } else {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô API ‡πÇ‡∏î‡∏¢‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        await _scheduleNotificationOnServer(
          type,
          usernames,
          settings['email'],
          settings['checkFrequency'],
          false, // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤
        );

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        await _scheduleNotificationOnServer(
          type,
          usernames,
          settings['email'],
          settings['checkFrequency'],
          true, // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        );

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô SharedPreferences
        final updatedSettings = {
          ...settings,
          'usernames': usernames,
        };
        final key = 'notification_settings_$type';
        await prefs.setString(key, jsonEncode(updatedSettings));
      }
    }
  }

  // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å API server
  Future<void> _deleteNotificationFromServer(String type, String email) async {
    try {
      print('üóëÔ∏è ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å API server: $type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö $email');

      // ‡∏´‡∏≤ taskId ‡∏à‡∏≤‡∏Å API
      final response = await http.get(
        Uri.parse('$_baseUrl/api/scheduled-tasks'),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final tasks = data['tasks'] as List;

        // ‡∏´‡∏≤ task ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö type ‡πÅ‡∏•‡∏∞ email
        final task = tasks.firstWhere(
          (task) => task['type'] == type && task['email'] == email,
          orElse: () => null,
        );

        if (task != null) {
          // ‡∏•‡∏ö task ‡∏à‡∏≤‡∏Å API
          final deleteResponse = await http.delete(
            Uri.parse('$_baseUrl/api/scheduled-task/${task['taskId']}'),
            headers: {'Content-Type': 'application/json'},
          );

          if (deleteResponse.statusCode == 200) {
            print('‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å API server ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          } else {
            print(
                '‚ùå Error ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å API server: ${deleteResponse.statusCode}');
          }
        } else {
          print('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô API server');
        }
      } else {
        print('‚ùå Error ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• scheduled tasks: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å API server: $e');
    }
  }

  // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö type ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
  Future<void> removeAllNotifications(String type) async {
    try {
      print('üóëÔ∏è ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: $type');

      // ‡∏´‡∏≤ taskId ‡∏à‡∏≤‡∏Å API
      final response = await http.get(
        Uri.parse('$_baseUrl/api/scheduled-tasks'),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final tasks = data['tasks'] as List;

        // ‡∏´‡∏≤ tasks ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö type
        final typeTasks = tasks.where((task) => task['type'] == type).toList();

        for (final task in typeTasks) {
          // ‡∏•‡∏ö task ‡∏à‡∏≤‡∏Å API
          final deleteResponse = await http.delete(
            Uri.parse('$_baseUrl/api/scheduled-task/${task['taskId']}'),
            headers: {'Content-Type': 'application/json'},
          );

          if (deleteResponse.statusCode == 200) {
            print('‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${task['taskId']}');
          } else {
            print('‚ùå Error ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${task['taskId']}');
          }
        }

        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SharedPreferences
        final prefs = await SharedPreferences.getInstance();
        final key = 'notification_settings_$type';
        await prefs.remove(key);

        print('‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö $type ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } else {
        print('‚ùå Error ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• scheduled tasks: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: $e');
    }
  }
}
